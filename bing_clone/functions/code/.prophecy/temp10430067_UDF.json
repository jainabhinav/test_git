{"initCode":"def f_keep_data_charge(cost_pct: Double, agg_type: Int, payment_type: Int) = {\n  var l_agg_type = convertToInt(if ((try {\n agg_type\n} catch{\n case error: Throwable => null\n}\n) == null) {\n 0\n} else {\n agg_type\n})\nvar l_payment_type = convertToInt(if ((try {\n payment_type\n} catch{\n case error: Throwable => null\n}\n) == null) {\n 0\n} else {\n payment_type\n})\nvar l_keep_data_charge = 0\nl_keep_data_charge = convertToInt(if ((if ((try {\n cost_pct\n} catch{\n case error: Throwable => null\n}\n) == null) {\n 0\n} else {\n cost_pct\n}) > 0) {\n if ((f_payment_type_matches(l_agg_type, l_payment_type) == 1) || (f_forward_for_next_stage(l_agg_type, l_payment_type) == 1)) {\n 1\n} else {\n l_keep_data_charge\n}\n} else {\n if (((if ((try {\n agg_type\n} catch{\n case error: Throwable => null\n}\n) == null) {\n 0\n} else {\n agg_type\n}) == 0) || ((if ((try {\n agg_type\n} catch{\n case error: Throwable => null\n}\n) == null) {\n 0\n} else {\n agg_type\n}) == 4)) {\n 1\n} else {\n l_keep_data_charge\n}\n})\nl_keep_data_charge\n}\ndef f_forward_for_next_stage(agg_type: Int, payment_type: Int) = {\n  var l_payment_type = convertToInt(if ((try {\n payment_type\n} catch{\n case error: Throwable => null\n}\n) == null) {\n 0\n} else {\n payment_type\n})\nvar l_forward_for_next_stage = 0\nl_forward_for_next_stage = convertToInt(if ((if ((try {\n agg_type\n} catch{\n case error: Throwable => null\n}\n) == null) {\n 0\n} else {\n agg_type\n}) == 1) {\n if (l_payment_type == 2) {\n 1\n} else {\n 0\n}\n} else {\n if ((if ((try {\n agg_type\n} catch{\n case error: Throwable => null\n}\n) == null) {\n 0\n} else {\n agg_type\n}) == 3) {\n 0\n} else {\n if ((if ((try {\n agg_type\n} catch{\n case error: Throwable => null\n}\n) == null) {\n 0\n} else {\n agg_type\n}) == 5) {\n 0\n} else {\n 1\n}\n}\n})\nl_forward_for_next_stage\n}\ndef f_payment_type_matches(agg_type: Int, payment_type: Int) = {\n  var l_payment_type_matches = 0\nl_payment_type_matches = convertToInt(if (((f_is_matching_payment_and_agg_type(if ((try {\n agg_type\n} catch{\n case error: Throwable => null\n}\n) == null) {\n 0\n} else {\n agg_type\n}, if ((try {\n payment_type\n} catch{\n case error: Throwable => null\n}\n) == null) {\n 0\n} else {\n payment_type\n}) == 1) || (((if ((try {\n agg_type\n} catch{\n case error: Throwable => null\n}\n) == null) {\n 0\n} else {\n agg_type\n}) == 5) && ((if ((try {\n payment_type\n} catch{\n case error: Throwable => null\n}\n) == null) {\n 0\n} else {\n payment_type\n}) == 6))) || (((if ((try {\n agg_type\n} catch{\n case error: Throwable => null\n}\n) == null) {\n 0\n} else {\n agg_type\n}) == 0) && (((((if ((try {\n payment_type\n} catch{\n case error: Throwable => null\n}\n) == null) {\n 0\n} else {\n payment_type\n}) != 1) && ((if ((try {\n payment_type\n} catch{\n case error: Throwable => null\n}\n) == null) {\n 0\n} else {\n payment_type\n}) != 2)) && ((if ((try {\n payment_type\n} catch{\n case error: Throwable => null\n}\n) == null) {\n 0\n} else {\n payment_type\n}) != 5)) && ((if ((try {\n payment_type\n} catch{\n case error: Throwable => null\n}\n) == null) {\n 0\n} else {\n payment_type\n}) != 6)))) {\n 1\n} else {\n l_payment_type_matches\n})\nl_payment_type_matches\n}\ndef f_is_matching_payment_and_agg_type(agg_type: Int, payment_type: Int) = {\n  var l_agg_type = convertToInt(if ((try {\n agg_type\n} catch{\n case error: Throwable => null\n}\n) == null) {\n 0\n} else {\n agg_type\n})\nvar l_payment_type = convertToInt(if ((try {\n payment_type\n} catch{\n case error: Throwable => null\n}\n) == null) {\n 0\n} else {\n payment_type\n})\nvar l_is_matching_payment_and_agg_type = 0\nl_is_matching_payment_and_agg_type = convertToInt(if (((if ((try {\n agg_type\n} catch{\n case error: Throwable => null\n}\n) == null) {\n 0\n} else {\n agg_type\n}) != 1) && ((if ((try {\n agg_type\n} catch{\n case error: Throwable => null\n}\n) == null) {\n 0\n} else {\n agg_type\n}) != 2)) {\n if (l_agg_type == 3) {\n if (l_payment_type == 2) {\n 1\n} else {\n l_is_matching_payment_and_agg_type\n}\n} else {\n if (l_agg_type == 4) {\n if (l_payment_type == 5) {\n 1\n} else {\n l_is_matching_payment_and_agg_type\n}\n} else {\n l_is_matching_payment_and_agg_type\n}\n}\n} else {\n if ((if ((try {\n payment_type\n} catch{\n case error: Throwable => null\n}\n) == null) {\n 0\n} else {\n payment_type\n}) == 1) {\n 1\n} else {\n l_is_matching_payment_and_agg_type\n}\n})\nl_is_matching_payment_and_agg_type\n}","code":"udf((_l_data_costs: Seq[Row], _l_payment_type: Integer, _l_member_sales_tax_rate_pct: Double, _i: Integer, _l_media_cost_cpm: Double, _l_agg_type: Integer, _l_data_cost: Row, _data_costs: Seq[Row]) => {\n  var l_data_costs = (_l_data_costs).toArray\nvar l_payment_type = _l_payment_type\nvar l_member_sales_tax_rate_pct = _l_member_sales_tax_rate_pct\nvar i = _i\nvar l_media_cost_cpm = _l_media_cost_cpm\nvar l_agg_type = _l_agg_type\nvar l_data_cost = _l_data_cost\nvar data_costs = (_data_costs).toArray\n\nwhile(compareTo(i, data_costs.length) < 0) {\nl_data_cost = data_costs(convertToInt(i))\nif((!_isnull(data_costs(convertToInt(i)).getAs[Double](\"cost\"))) && (!_isnull(data_costs(convertToInt(i)).getAs[Double](\"cost_pct\")))){\nif(f_keep_data_charge(data_costs(convertToInt(i)).getAs[Double](\"cost_pct\"), l_agg_type, l_payment_type) == 1){\nif((compareTo(data_costs(convertToInt(i)).getAs[Double](\"cost_pct\"), 0) > 0) && (f_payment_type_matches(l_agg_type, l_payment_type) == 1)){\nl_data_cost = updateIndexInRow(l_data_cost, 1, (l_media_cost_cpm * (l_data_cost.getAs[Double](\"cost_pct\") / 100.0)) * (1.0 + (l_member_sales_tax_rate_pct / 100.0)))\n}\nif(l_agg_type == 0){\nl_data_cost = updateIndexInRow(l_data_cost, 1, l_data_cost.getAs[Double](\"cost\") * (1.0 + (l_member_sales_tax_rate_pct / 100.0)))\n}\nl_data_costs = Array.concat(l_data_costs,Array.fill(1)(l_data_cost))\n}\n}\ni = i + convertToInt(1)\n}\n\nRow(l_data_costs.map{x => if (!_isnull(x)) {\n Row(convertToInt(x.get(0)), x.get(1), x.getAs[Seq[Integer]](2).toArray, x.get(3))\n} else {\n null\n}}.toArray, convertToInt(i), if (!_isnull(l_data_cost)) {\n Row(convertToInt(l_data_cost.get(0)), l_data_cost.get(1), l_data_cost.getAs[Seq[Integer]](2).toArray, l_data_cost.get(3))\n} else {\n null\n})\n},  StructType(\n      List(\n      StructField(\"l_data_costs\", ArrayType( StructType(\n      List(\n      StructField(\"data_member_id\", IntegerType, true),StructField(\"cost\", DoubleType, true),StructField(\"used_segments\", ArrayType(IntegerType), false),StructField(\"cost_pct\", DoubleType, true)\n      )\n    )), false),StructField(\"i\", IntegerType, false),StructField(\"l_data_cost\",  StructType(\n      List(\n      StructField(\"data_member_id\", IntegerType, true),StructField(\"cost\", DoubleType, true),StructField(\"used_segments\", ArrayType(IntegerType), false),StructField(\"cost_pct\", DoubleType, true)\n      )\n    ), false)\n      )\n    ))"}