{"parameters":[{"name":"sup_ip_range_lookup_count","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"sup_common_deal_lookup_2","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"sup_common_deal_lookup","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"sup_bidder_campaign_lookup","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"_f_view_detection_enabled","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"f_transaction_event_type_id_87067","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"_f_find_personal_identifier","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"_f_viewdef_definition_id","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"_f_is_buy_side","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"_f_has_transacted","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"f_transaction_event_87047","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"f_transaction_event_87057","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"f_preempt_over_impression_95337","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"f_transaction_event_type_id_87077","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"f_preempt_over_impression_94298","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"f_preempt_over_impression_88439","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"f_preempt_over_impression_88639","type":"column","metadata":{"description":"","tags":[],"mappings":[]}}],"output":{"type":"struct","fields":[{"name":"date_time","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"auction_id_64","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"user_id_64","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"tag_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"venue_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"inventory_source_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"session_frequency","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"site_domain","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"width","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"height","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"geo_country","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"geo_region","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"gender","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"age","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"seller_member_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"buyer_member_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"creative_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"seller_currency","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"buyer_currency","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"buyer_bid","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"buyer_spend","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"ecp","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"reserve_price","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"advertiser_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"campaign_group_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"campaign_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"creative_freq","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"creative_rec","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_learn","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_remarketing","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"advertiser_frequency","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"advertiser_recency","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"user_group_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"camp_dp_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"media_buy_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"media_buy_cost","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"brand_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"cleared_direct","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"clear_fees","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"media_buy_rev_share_pct","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"revenue_value","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"pricing_type","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"can_convert","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"pub_rule_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_control","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"control_pct","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"control_creative_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"predicted_cpm","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"actual_bid","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"site_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"content_category_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"auction_service_fees","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"discrepancy_allowance","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"forex_allowance","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"creative_overage_fees","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"fold_position","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"external_inv_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"cadence_modifier","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"imp_type","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"advertiser_currency","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"advertiser_exchange_rate","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"ip_address","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"publisher_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"auction_service_deduction","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"insertion_order_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"predict_type_rev","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"predict_type_goal","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"predict_type_cost","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"booked_revenue_dollars","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"booked_revenue_adv_curr","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"commission_cpm","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"commission_revshare","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"serving_fees_cpm","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"serving_fees_revshare","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"user_tz_offset","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"media_type","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"operating_system","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"browser","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"language","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"publisher_currency","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"publisher_exchange_rate","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"media_cost_dollars_cpm","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"payment_type","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"revenue_type","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"seller_revenue_cpm","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"bidder_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"inv_code","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"application_id","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"shadow_price","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"eap","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"datacenter_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"imp_blacklist_or_fraud","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"vp_expose_domains","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"vp_expose_categories","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"vp_expose_pubs","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"vp_expose_tag","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"vp_expose_age","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"vp_expose_gender","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"inventory_url_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"audit_type","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_exclusive","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"truncate_ip","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"device_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"carrier_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"creative_audit_status","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_creative_hosted","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"seller_deduction","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"city","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"latitude","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"longitude","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"device_unique_id","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"package_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"targeted_segments","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"supply_type","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_toolbar","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"deal_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"vp_bitmap","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"view_detection_enabled","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"view_result","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"ozone_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_performance","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"sdk_version","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"inventory_session_frequency","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"device_type","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"dma","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"postal","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"viewdef_definition_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"viewdef_viewable","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"view_measurable","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"viewable","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_secure","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"view_non_measurable_reason","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"data_costs","type":{"type":"array","elementType":{"type":"struct","fields":[{"name":"data_member_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"cost","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"used_segments","type":{"type":"array","elementType":"integer","containsNull":true},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"cost_pct","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"containsNull":true},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"bidder_instance_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"campaign_group_freq","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"campaign_group_rec","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"insertion_order_freq","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"insertion_order_rec","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"buyer_gender","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"buyer_age","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"targeted_segment_list","type":{"type":"array","elementType":"integer","containsNull":true},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"custom_model_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"custom_model_last_modified","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"custom_model_output_code","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"external_uid","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"request_uuid","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"mobile_app_instance_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"traffic_source_code","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"external_request_id","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"stitch_group_id","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"deal_type","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"ym_floor_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"ym_bias_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"bid_priority","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"buyer_charges","type":{"type":"struct","fields":[{"name":"rate_card_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"member_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_dw","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"pricing_terms","type":{"type":"array","elementType":{"type":"struct","fields":[{"name":"term_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"amount","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"rate","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_deduction","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_media_cost_dependent","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"data_member_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"containsNull":true},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"fx_margin_rate_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"marketplace_owner_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"virtual_marketplace_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"amino_enabled","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"seller_charges","type":{"type":"struct","fields":[{"name":"rate_card_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"member_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_dw","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"pricing_terms","type":{"type":"array","elementType":{"type":"struct","fields":[{"name":"term_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"amount","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"rate","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_deduction","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_media_cost_dependent","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"data_member_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"containsNull":true},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"fx_margin_rate_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"marketplace_owner_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"virtual_marketplace_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"amino_enabled","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"explore_disposition","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"device_make_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"operating_system_family_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"tag_sizes","type":{"type":"array","elementType":{"type":"struct","fields":[{"name":"width","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"height","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"containsNull":true},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"campaign_group_models","type":{"type":"array","elementType":{"type":"struct","fields":[{"name":"model_type","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"model_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"leaf_code","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"origin","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"experiment","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"value","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"containsNull":true},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"pricing_media_type","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"buyer_trx_event_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"seller_trx_event_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"revenue_auction_event_type","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_prebid","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_unit_of_trx","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"imps_for_budget_caps_pacing","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"auction_timestamp","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"two_phase_reduction_applied","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"region_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"media_company_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"trade_agreement_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"personal_data","type":{"type":"struct","fields":[{"name":"user_id_64","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"device_unique_id","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"external_uid","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"ip_address","type":"binary","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"crossdevice_group","type":{"type":"struct","fields":[{"name":"graph_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"group_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"latitude","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"longitude","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"ipv6_address","type":"binary","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"subject_to_gdpr","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"geo_country","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"gdpr_consent_string","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"preempt_ip_address","type":"binary","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"device_type","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"device_make_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"device_model_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"new_user_id_64","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_service_provider_mode","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_personal_info_sale","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"anonymized_user_info","type":{"type":"struct","fields":[{"name":"user_id","type":"binary","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"gdpr_consent_cookie","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"additional_clearing_events","type":{"type":"array","elementType":"integer","containsNull":true},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"fx_rate_snapshot_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"crossdevice_group_anon","type":{"type":"struct","fields":[{"name":"graph_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"group_id","type":"binary","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"crossdevice_graph_cost","type":{"type":"struct","fields":[{"name":"graph_provider_member_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"cost_cpm_usd","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"revenue_event_type_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"buyer_trx_event_type_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"seller_trx_event_type_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"external_creative_id","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"targeted_segment_details","type":{"type":"array","elementType":{"type":"struct","fields":[{"name":"segment_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"last_seen_min","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"containsNull":true},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"bidder_seat_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_whiteops_scanned","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"default_referrer_url","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_curated","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"curator_member_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"total_partner_fees_microcents","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"net_buyer_spend","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_prebid_server","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"cold_start_price_type","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"discovery_state","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"billing_period_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"flight_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"split_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"net_media_cost_dollars_cpm","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"total_data_costs_microcents","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"total_profit_microcents","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"targeted_crossdevice_graph_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"discovery_prediction","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"campaign_group_type_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"hb_source","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"external_campaign_id","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"excluded_targeted_segment_details","type":{"type":"array","elementType":{"type":"struct","fields":[{"name":"segment_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"containsNull":true},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"trust_id","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"predicted_kpi_event_rate","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"has_crossdevice_reach_extension","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"crossdevice_graph_membership","type":{"type":"array","elementType":{"type":"struct","fields":[{"name":"graph_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"group_id","type":"binary","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"containsNull":true},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"total_segment_data_costs_microcents","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"total_feature_costs_microcents","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"counterparty_ruleset_type","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"log_product_ads","type":{"type":"struct","fields":[{"name":"product_feed_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"item_selection_strategy_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"product_uuid","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"buyer_line_item_currency","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"deal_line_item_currency","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"measurement_fee_usd","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"measurement_provider_member_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"offline_attribution_provider_member_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"offline_attribution_cost_usd_cpm","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"pred_info","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"imp_rejecter_do_auction","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"personal_identifiers","type":{"type":"array","elementType":{"type":"struct","fields":[{"name":"identity_type","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"identity_value","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"containsNull":true},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"imp_rejecter_applied","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"ip_derived_latitude","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"ip_derived_longitude","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"personal_identifiers_experimental","type":{"type":"array","elementType":{"type":"struct","fields":[{"name":"identity_type","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"identity_value","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"containsNull":true},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"postal_code_ext_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"ecpm_conversion_rate","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_residential_ip","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"hashed_ip","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"targeted_segment_details_by_id_type","type":{"type":"array","elementType":{"type":"struct","fields":[{"name":"identity_type","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"targeted_segment_details","type":{"type":"array","elementType":{"type":"struct","fields":[{"name":"segment_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"last_seen_min","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"containsNull":true},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"containsNull":true},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"offline_attribution","type":{"type":"array","elementType":{"type":"struct","fields":[{"name":"provider_member_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"cost_usd_cpm","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"containsNull":true},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"frequency_cap_type_internal","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"modeled_cap_did_override_line_item_daily_cap","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"modeled_cap_user_sample_rate","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"estimated_audience_imps","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"audience_imps","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"district_postal_code_lists","type":{"type":"array","elementType":"integer","containsNull":true},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"bidding_host_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"buyer_dpvp_bitmap","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"seller_dpvp_bitmap","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"browser_code_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_prebid_server_included","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"feature_tests_bitmap","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"private_auction_eligible","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"chrome_traffic_label","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_private_auction","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"creative_media_subtype_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"allowed_media_types","type":{"type":"array","elementType":"integer","containsNull":true},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"isCustomSchemaEnabled":true,"code":"var imp_type:         org.apache.spark.sql.Column = lit(1)\n  var is_dw_normalized: org.apache.spark.sql.Column = lit(0)\n  var buyer_member_id:  org.apache.spark.sql.Column = lit(0)\n\n  var campaign: org.apache.spark.sql.Column = lit(null).cast(\n    StructType(\n      List(\n        StructField(\"campaign_id\",            IntegerType, true),\n        StructField(\"campaign_type_id\",       IntegerType, true),\n        StructField(\"campaign_group_id\",      IntegerType, true),\n        StructField(\"campaign_group_type_id\", IntegerType, true)\n      )\n    )\n  )\n\n  var split_id: org.apache.spark.sql.Column =\n    coalesce(col(\"log_dw_bid.split_id\").cast(IntegerType), lit(0))\n      .cast(IntegerType)\n\n  var seller_trx_event_id:      org.apache.spark.sql.Column = lit(0)\n  var buyer_trx_event_id:       org.apache.spark.sql.Column = lit(0)\n  var seller_trx_event_type_id: org.apache.spark.sql.Column = lit(0)\n  var buyer_trx_event_type_id:  org.apache.spark.sql.Column = lit(0)\n  var payment_type_normalized:  org.apache.spark.sql.Column = lit(999)\n  var revenue_type_normalized:  org.apache.spark.sql.Column = lit(999)\n\n  var has_seller_transacted: org.apache.spark.sql.Column =\n    lit(0).cast(BooleanType)\n\n  var has_buyer_transacted: org.apache.spark.sql.Column =\n    lit(0).cast(BooleanType)\n\n  var view_detection_enabled:     org.apache.spark.sql.Column = lit(0)\n  var view_measurable:            org.apache.spark.sql.Column = lit(0)\n  var viewable:                   org.apache.spark.sql.Column = lit(0)\n  var view_non_measurable_reason: org.apache.spark.sql.Column = lit(0)\n  var viewdef_definition_id:      org.apache.spark.sql.Column = lit(0)\n  var viewdef_viewable:           org.apache.spark.sql.Column = lit(0)\n  var view_result:                org.apache.spark.sql.Column = lit(0)\n  var is_curated:                 org.apache.spark.sql.Column = lit(0)\n\n  var curator_member_id: org.apache.spark.sql.Column =\n    lit(null).cast(IntegerType)\n\n  var member_id_by_deal_id: org.apache.spark.sql.Column = lit(null).cast(\n    StructType(\n      List(StructField(\"id\",           IntegerType, true),\n           StructField(\"member_id\",    IntegerType, true),\n           StructField(\"deal_type_id\", IntegerType, true)\n      )\n    )\n  )\n\n  var deal_id:                     org.apache.spark.sql.Column = lit(0)\n  var deal_type:                   org.apache.spark.sql.Column = lit(null).cast(IntegerType)\n  var ttl:                         org.apache.spark.sql.Column = lit(0)\n  var imps_for_budget_caps_pacing: org.apache.spark.sql.Column = lit(0)\n  var is_budget_table_imp_type:    org.apache.spark.sql.Column = lit(0)\n  var is_not_roadblock_secondary:  org.apache.spark.sql.Column = lit(0)\n  var is_external_imp_type:        org.apache.spark.sql.Column = lit(0)\n  var is_not_video_imp:            org.apache.spark.sql.Column = lit(0)\n  var creative_id:                 org.apache.spark.sql.Column = lit(null).cast(IntegerType)\n  var advertiser_id:               org.apache.spark.sql.Column = lit(null).cast(IntegerType)\n\n  var campaign_group_id: org.apache.spark.sql.Column =\n    lit(null).cast(IntegerType)\n\n  var insertion_order_id: org.apache.spark.sql.Column =\n    lit(null).cast(IntegerType)\n\n  var campaign_id:            org.apache.spark.sql.Column = lit(null).cast(IntegerType)\n  var campaign_group_type_id: org.apache.spark.sql.Column = lit(0)\n  var is_placeholder_bid:     org.apache.spark.sql.Column = lit(0)\n  var flight_id:              org.apache.spark.sql.Column = lit(null).cast(IntegerType)\n\n  var billing_period_id: org.apache.spark.sql.Column =\n    lit(null).cast(IntegerType)\n\n  var should_process_views: org.apache.spark.sql.Column =\n    lit(null).cast(IntegerType)\n\n  var should_zero_seller_revenue: org.apache.spark.sql.Column =\n    lit(0).cast(BooleanType)\n\n  var netflix_ppid: org.apache.spark.sql.Column = lit(null).cast(StringType)\n\n  var v_transaction_event_pricing: org.apache.spark.sql.Column = lit(null).cast(\n    StructType(\n      List(\n        StructField(\"gross_payment_value_microcents\", LongType, true),\n        StructField(\"net_payment_value_microcents\",   LongType, true),\n        StructField(\"seller_revenue_microcents\",      LongType, true),\n        StructField(\n          \"buyer_charges\",\n          StructType(\n            List(\n              StructField(\"rate_card_id\", IntegerType, true),\n              StructField(\"member_id\",    IntegerType, true),\n              StructField(\"is_dw\",        BooleanType, true),\n              StructField(\n                \"pricing_terms\",\n                ArrayType(\n                  StructType(\n                    List(\n                      StructField(\"term_id\",                 IntegerType, true),\n                      StructField(\"amount\",                  DoubleType,  true),\n                      StructField(\"rate\",                    DoubleType,  true),\n                      StructField(\"is_deduction\",            BooleanType, true),\n                      StructField(\"is_media_cost_dependent\", BooleanType, true),\n                      StructField(\"data_member_id\",          IntegerType, true)\n                    )\n                  ),\n                  true\n                ),\n                true\n              ),\n              StructField(\"fx_margin_rate_id\",      IntegerType, true),\n              StructField(\"marketplace_owner_id\",   IntegerType, true),\n              StructField(\"virtual_marketplace_id\", IntegerType, true),\n              StructField(\"amino_enabled\",          BooleanType, true)\n            )\n          ),\n          true\n        ),\n        StructField(\n          \"seller_charges\",\n          StructType(\n            List(\n              StructField(\"rate_card_id\", IntegerType, true),\n              StructField(\"member_id\",    IntegerType, true),\n              StructField(\"is_dw\",        BooleanType, true),\n              StructField(\n                \"pricing_terms\",\n                ArrayType(\n                  StructType(\n                    List(\n                      StructField(\"term_id\",                 IntegerType, true),\n                      StructField(\"amount\",                  DoubleType,  true),\n                      StructField(\"rate\",                    DoubleType,  true),\n                      StructField(\"is_deduction\",            BooleanType, true),\n                      StructField(\"is_media_cost_dependent\", BooleanType, true),\n                      StructField(\"data_member_id\",          IntegerType, true)\n                    )\n                  ),\n                  true\n                ),\n                true\n              ),\n              StructField(\"fx_margin_rate_id\",      IntegerType, true),\n              StructField(\"marketplace_owner_id\",   IntegerType, true),\n              StructField(\"virtual_marketplace_id\", IntegerType, true),\n              StructField(\"amino_enabled\",          BooleanType, true)\n            )\n          ),\n          true\n        ),\n        StructField(\"buyer_transacted\",  BooleanType, true),\n        StructField(\"seller_transacted\", BooleanType, true)\n      )\n    )\n  )\n\n  var buyer_charges_pricing_terms: org.apache.spark.sql.Column = lit(null).cast(\n    ArrayType(\n      StructType(\n        List(\n          StructField(\"term_id\",                 IntegerType, true),\n          StructField(\"amount\",                  DoubleType,  true),\n          StructField(\"rate\",                    DoubleType,  true),\n          StructField(\"is_deduction\",            BooleanType, true),\n          StructField(\"is_media_cost_dependent\", BooleanType, true),\n          StructField(\"data_member_id\",          IntegerType, true)\n        )\n      ),\n      true\n    )\n  )\n\n  var seller_charges_pricing_terms: org.apache.spark.sql.Column =\n    lit(null).cast(\n      ArrayType(\n        StructType(\n          List(\n            StructField(\"term_id\",                 IntegerType, true),\n            StructField(\"amount\",                  DoubleType,  true),\n            StructField(\"rate\",                    DoubleType,  true),\n            StructField(\"is_deduction\",            BooleanType, true),\n            StructField(\"is_media_cost_dependent\", BooleanType, true),\n            StructField(\"data_member_id\",          IntegerType, true)\n          )\n        ),\n        true\n      )\n    )\n\n  var v_pricing_term: org.apache.spark.sql.Column = lit(null).cast(\n    StructType(\n      List(\n        StructField(\"term_id\",                 IntegerType, true),\n        StructField(\"amount\",                  DoubleType,  true),\n        StructField(\"rate\",                    DoubleType,  true),\n        StructField(\"is_deduction\",            BooleanType, true),\n        StructField(\"is_media_cost_dependent\", BooleanType, true),\n        StructField(\"data_member_id\",          IntegerType, true)\n      )\n    )\n  )\n\n  var auction_service_deduction:   org.apache.spark.sql.Column = lit(0)\n  var auction_service_fees:        org.apache.spark.sql.Column = lit(0)\n  var discrepancy_allowance:       org.apache.spark.sql.Column = lit(0)\n  var creative_overage_fees:       org.apache.spark.sql.Column = lit(0)\n  var buyer_spend_cpm:             org.apache.spark.sql.Column = lit(0)\n  var buyer_spend_microcents:      org.apache.spark.sql.Column = lit(0)\n  var seller_revenue_cpm:          org.apache.spark.sql.Column = lit(0)\n  var seller_revenue_microcents:   org.apache.spark.sql.Column = lit(0)\n  var seller_deduction_term_id_1:  org.apache.spark.sql.Column = lit(0)\n  var seller_deduction_term_id_74: org.apache.spark.sql.Column = lit(0)\n  var seller_deduction:            org.apache.spark.sql.Column = lit(0)\n  var commission_cpm:              org.apache.spark.sql.Column = lit(0)\n  var commission_revshare:         org.apache.spark.sql.Column = lit(0)\n  var serving_fees_cpm:            org.apache.spark.sql.Column = lit(0)\n  var serving_fees_revshare:       org.apache.spark.sql.Column = lit(0)\n  var booked_revenue_dollars:      org.apache.spark.sql.Column = lit(0)\n  var media_buy_rev_share_pct:     org.apache.spark.sql.Column = lit(0)\n  var media_buy_cost:              org.apache.spark.sql.Column = lit(0)\n  var booked_revenue_adv_curr:     org.apache.spark.sql.Column = lit(0)\n  var media_cost_dollars_cpm:      org.apache.spark.sql.Column = lit(0)\n  var member_sales_tax_rate_pct:   org.apache.spark.sql.Column = lit(0)\n\n  var revenue_value: org.apache.spark.sql.Column =\n    coalesce(col(\"log_dw_bid.revenue_value_dollars\"), lit(0)).cast(DoubleType)\n\n  var data_costs: org.apache.spark.sql.Column = lit(null).cast(\n    ArrayType(\n      StructType(\n        List(\n          StructField(\"data_member_id\", IntegerType,                  true),\n          StructField(\"cost\",           DoubleType,                   true),\n          StructField(\"used_segments\",  ArrayType(IntegerType, true), true),\n          StructField(\"cost_pct\",       DoubleType,                   true)\n        )\n      ),\n      true\n    )\n  )\n\n  var virtual_log_dw_bid: org.apache.spark.sql.Column = struct(\n    lit(0L).cast(LongType).as(\"date_time\"),\n    lit(0L).cast(LongType).as(\"auction_id_64\"),\n    lit(null).as(\"price\"),\n    lit(null).as(\"member_id\"),\n    lit(null).as(\"advertiser_id\"),\n    lit(null).as(\"campaign_group_id\"),\n    lit(null).as(\"campaign_id\"),\n    lit(null).as(\"creative_id\"),\n    lit(null).as(\"creative_freq\"),\n    lit(null).as(\"creative_rec\"),\n    lit(null).as(\"advertiser_freq\"),\n    lit(null).as(\"advertiser_rec\"),\n    lit(null).as(\"is_remarketing\"),\n    lit(null).as(\"user_group_id\"),\n    lit(null).as(\"media_buy_cost\"),\n    lit(null).as(\"is_default\"),\n    lit(null).as(\"pub_rule_id\"),\n    lit(null).as(\"media_buy_rev_share_pct\"),\n    lit(null).as(\"pricing_type\"),\n    lit(null).as(\"can_convert\"),\n    lit(null).as(\"is_control\"),\n    lit(null).as(\"control_pct\"),\n    lit(null).as(\"control_creative_id\"),\n    lit(null).as(\"cadence_modifier\"),\n    lit(null).as(\"advertiser_currency\"),\n    lit(null).as(\"advertiser_exchange_rate\"),\n    lit(null).as(\"insertion_order_id\"),\n    lit(null).as(\"predict_type\"),\n    lit(null).as(\"predict_type_goal\"),\n    lit(null).as(\"revenue_value_dollars\"),\n    lit(null).as(\"revenue_value_adv_curr\"),\n    lit(null).as(\"commission_cpm\"),\n    lit(null).as(\"commission_revshare\"),\n    lit(null).as(\"serving_fees_cpm\"),\n    lit(null).as(\"serving_fees_revshare\"),\n    lit(null).as(\"publisher_currency\"),\n    lit(null).as(\"publisher_exchange_rate\"),\n    lit(null).as(\"payment_type\"),\n    lit(null).as(\"payment_value\"),\n    lit(null).as(\"creative_group_freq\"),\n    lit(null).as(\"creative_group_rec\"),\n    lit(null).as(\"revenue_type\"),\n    lit(null).as(\"apply_cost_on_default\"),\n    lit(null).as(\"instance_id\"),\n    lit(null).as(\"vp_expose_age\"),\n    lit(null).as(\"vp_expose_gender\"),\n    lit(null).as(\"targeted_segments\"),\n    lit(null).as(\"ttl\"),\n    lit(0L).cast(LongType).as(\"auction_timestamp\"),\n    array()\n      .cast(\n        ArrayType(\n          StructType(\n            List(\n              StructField(\"data_member_id\", IntegerType,                  true),\n              StructField(\"cost\",           DoubleType,                   true),\n              StructField(\"used_segments\",  ArrayType(IntegerType, true), true),\n              StructField(\"cost_pct\",       DoubleType,                   true)\n            )\n          ),\n          true\n        )\n      )\n      .as(\"data_costs\"),\n    array().cast(ArrayType(IntegerType, true)).as(\"targeted_segment_list\"),\n    lit(null).as(\"campaign_group_freq\"),\n    lit(null).as(\"campaign_group_rec\"),\n    lit(null).as(\"insertion_order_freq\"),\n    lit(null).as(\"insertion_order_rec\"),\n    lit(null).as(\"buyer_gender\"),\n    lit(null).as(\"buyer_age\"),\n    lit(null).as(\"custom_model_id\"),\n    lit(null).as(\"custom_model_last_modified\"),\n    lit(null).as(\"custom_model_output_code\"),\n    lit(null).as(\"bid_priority\"),\n    lit(null).as(\"explore_disposition\"),\n    lit(null).as(\"revenue_auction_event_type\"),\n    array()\n      .cast(\n        ArrayType(\n          StructType(\n            List(\n              StructField(\"model_type\", IntegerType, true),\n              StructField(\"model_id\",   IntegerType, true),\n              StructField(\"leaf_code\",  StringType,  true),\n              StructField(\"origin\",     IntegerType, true),\n              StructField(\"experiment\", IntegerType, true),\n              StructField(\"value\",      FloatType,   true)\n            )\n          ),\n          true\n        )\n      )\n      .as(\"campaign_group_models\"),\n    lit(null).as(\"impression_transaction_type\"),\n    lit(null).as(\"is_deferred\"),\n    lit(null).as(\"log_type\"),\n    lit(null).as(\"crossdevice_group_anon\"),\n    lit(null).as(\"fx_rate_snapshot_id\"),\n    lit(null).as(\"crossdevice_graph_cost\"),\n    lit(null).as(\"revenue_event_type_id\"),\n    array()\n      .cast(\n        ArrayType(StructType(\n                    List(StructField(\"segment_id\",    IntegerType, true),\n                         StructField(\"last_seen_min\", IntegerType, true)\n                    )\n                  ),\n                  true\n        )\n      )\n      .as(\"targeted_segment_details\"),\n    lit(null).as(\"insertion_order_budget_interval_id\"),\n    lit(null).as(\"campaign_group_budget_interval_id\"),\n    lit(null).as(\"cold_start_price_type\"),\n    lit(null).as(\"discovery_state\"),\n    lit(null).as(\"revenue_info\"),\n    lit(null).as(\"use_revenue_info\"),\n    lit(null).as(\"sales_tax_rate_pct\"),\n    lit(null).as(\"targeted_crossdevice_graph_id\"),\n    lit(null).as(\"product_feed_id\"),\n    lit(null).as(\"item_selection_strategy_id\"),\n    lit(null).as(\"discovery_prediction\"),\n    lit(null).as(\"bidding_host_id\"),\n    lit(null).as(\"split_id\"),\n    array()\n      .cast(\n        ArrayType(\n          StructType(List(StructField(\"segment_id\", IntegerType, true))),\n          true\n        )\n      )\n      .as(\"excluded_targeted_segment_details\"),\n    lit(null).as(\"predicted_kpi_event_rate\"),\n    lit(null).as(\"has_crossdevice_reach_extension\"),\n    lit(null).as(\"advertiser_expected_value_ecpm_ac\"),\n    lit(null).as(\"bpp_multiplier\"),\n    lit(null).as(\"bpp_offset\"),\n    lit(null).as(\"bid_modifier\"),\n    lit(null).as(\"payment_value_microcents\"),\n    array()\n      .cast(\n        ArrayType(StructType(\n                    List(StructField(\"graph_id\", IntegerType, true),\n                         StructField(\"group_id\", BinaryType,  true)\n                    )\n                  ),\n                  true\n        )\n      )\n      .as(\"crossdevice_graph_membership\"),\n    array()\n      .cast(\n        ArrayType(\n          StructType(\n            List(\n              StructField(\"kpi_event_id\",               IntegerType, true),\n              StructField(\"ev_kpi_event_ac\",            DoubleType,  true),\n              StructField(\"p_kpi_event\",                DoubleType,  true),\n              StructField(\"bpo_aggressiveness_factor\",  DoubleType,  true),\n              StructField(\"min_margin_pct\",             DoubleType,  true),\n              StructField(\"max_revenue_or_bid_value\",   DoubleType,  true),\n              StructField(\"min_revenue_or_bid_value\",   DoubleType,  true),\n              StructField(\"cold_start_price_ac\",        DoubleType,  true),\n              StructField(\"dynamic_bid_max_revenue_ac\", DoubleType,  true),\n              StructField(\"p_revenue_event\",            DoubleType,  true),\n              StructField(\"total_fees_deducted_ac\",     DoubleType,  true)\n            )\n          ),\n          true\n        )\n      )\n      .as(\"valuation_landscape\"),\n    lit(null).as(\"line_item_currency\"),\n    lit(null).as(\"measurement_fee_cpm_usd\"),\n    lit(null).as(\"measurement_provider_id\"),\n    lit(null).as(\"measurement_provider_member_id\"),\n    lit(null).as(\"offline_attribution_provider_member_id\"),\n    lit(null).as(\"offline_attribution_cost_usd_cpm\"),\n    array()\n      .cast(\n        ArrayType(\n          StructType(\n            List(\n              StructField(\"identity_type\", IntegerType, true),\n              StructField(\n                \"targeted_segment_details\",\n                ArrayType(StructType(\n                            List(StructField(\"segment_id\",    IntegerType, true),\n                                 StructField(\"last_seen_min\", IntegerType, true)\n                            )\n                          ),\n                          true\n                ),\n                true\n              )\n            )\n          ),\n          true\n        )\n      )\n      .as(\"targeted_segment_details_by_id_type\"),\n    array()\n      .cast(\n        ArrayType(StructType(\n                    List(StructField(\"provider_member_id\", IntegerType, true),\n                         StructField(\"cost_usd_cpm\",       DoubleType,  true)\n                    )\n                  ),\n                  true\n        )\n      )\n      .as(\"offline_attribution\"),\n    lit(null).as(\"frequency_cap_type_internal\"),\n    lit(null).as(\"modeled_cap_did_override_line_item_daily_cap\"),\n    lit(null).as(\"modeled_cap_user_sample_rate\"),\n    lit(null).as(\"bid_rate\"),\n    array().cast(ArrayType(IntegerType, true)).as(\"district_postal_code_lists\"),\n    lit(null).as(\"pre_bpp_price\"),\n    lit(null).as(\"feature_tests_bitmap\")\n  )\n\n  var data_costs_deal: org.apache.spark.sql.Column = lit(null).cast(\n    ArrayType(\n      StructType(\n        List(\n          StructField(\"data_member_id\", IntegerType,                  true),\n          StructField(\"cost\",           DoubleType,                   true),\n          StructField(\"used_segments\",  ArrayType(IntegerType, true), true),\n          StructField(\"cost_pct\",       DoubleType,                   true)\n        )\n      ),\n      true\n    )\n  )\n\n  var l_seller_deal_member_id: org.apache.spark.sql.Column =\n    lit(null).cast(IntegerType)\n\n  imp_type =\n    when(is_not_null(col(\"imp_type\").cast(IntegerType)).cast(BooleanType),\n         col(\"imp_type\").cast(IntegerType)\n    ).otherwise(imp_type).cast(IntegerType)\n  ttl = coalesce(col(\"log_impbus_impressions.ttl\").cast(IntegerType), lit(0))\n    .cast(IntegerType)\n  buyer_member_id = f_preempt_over_impression_non_zero_explicit(\n    is_not_null(col(\"log_impbus_preempt.buyer_member_id\").cast(IntegerType)),\n    col(\"log_impbus_impressions.buyer_member_id\").cast(IntegerType),\n    col(\"log_impbus_preempt.buyer_member_id\").cast(IntegerType)\n  ).cast(IntegerType)\n  is_dw_normalized = when(\n    ((((((((is_not_null(\n      col(\"log_impbus_impressions_pricing.seller_charges.is_dw\")\n    ).and(\n        col(\"log_impbus_impressions_pricing.seller_charges.is_dw\") === lit(1)\n      ))\n      .and(\n        is_not_null(col(\"log_impbus_impressions_pricing.buyer_charges.is_dw\"))\n      ))\n      .and(\n        col(\"log_impbus_impressions_pricing.buyer_charges.is_dw\") === lit(1)\n      ))\n      .and(\n        (((((imp_type =!= lit(1))\n          .and(imp_type =!= lit(2)))\n          .and(imp_type =!= lit(3)))\n          .and(imp_type =!= lit(8)))\n          .and(imp_type =!= lit(5)))\n          .and(imp_type =!= lit(9))\n      ))\n      .and(is_not_null(col(\"seller_member_id\").cast(IntegerType))))\n      .and(col(\"seller_member_id\").cast(IntegerType) =!= lit(0)))\n      .and(\n        is_not_null(\n          f_preempt_over_impression_non_zero_explicit(\n            is_not_null(\n              col(\"log_impbus_preempt.buyer_member_id\").cast(IntegerType)\n            ),\n            col(\"log_impbus_impressions.buyer_member_id\").cast(IntegerType),\n            col(\"log_impbus_preempt.buyer_member_id\").cast(IntegerType)\n          )\n        )\n      ))\n      .and(\n        f_preempt_over_impression_non_zero_explicit(\n          is_not_null(\n            col(\"log_impbus_preempt.buyer_member_id\").cast(IntegerType)\n          ),\n          col(\"log_impbus_impressions.buyer_member_id\").cast(IntegerType),\n          col(\"log_impbus_preempt.buyer_member_id\").cast(IntegerType)\n        ) =!= lit(0)\n      ))\n      .and(\n        col(\"seller_member_id\")\n          .cast(IntegerType) =!= f_preempt_over_impression_non_zero_explicit(\n          is_not_null(\n            col(\"log_impbus_preempt.buyer_member_id\").cast(IntegerType)\n          ),\n          col(\"log_impbus_impressions.buyer_member_id\").cast(IntegerType),\n          col(\"log_impbus_preempt.buyer_member_id\").cast(IntegerType)\n        )\n      ),\n    lit(1)\n  ).otherwise(is_dw_normalized).cast(IntegerType)\n  campaign_group_type_id = when(\n    ((is_not_null(col(\"campaign_id\").cast(IntegerType))\n      .and(col(\"campaign_id\").cast(IntegerType) =!= lit(0)))\n      .and(\n        is_not_null(sup_bidder_campaign_lookup).and(\n          is_not_null(\n            sup_bidder_campaign_lookup.getField(\"campaign_group_type_id\")\n          )\n        )\n      ))\n      .and(_f_is_buy_side === lit(1)),\n    sup_bidder_campaign_lookup.getField(\"campaign_group_type_id\")\n  ).otherwise(campaign_group_type_id).cast(IntegerType)\n  seller_trx_event_id = f_transaction_event_87047.cast(IntegerType)\n  buyer_trx_event_id = f_transaction_event_87057.cast(IntegerType)\n  seller_trx_event_type_id = f_transaction_event_type_id_87067.cast(IntegerType)\n  buyer_trx_event_type_id = f_transaction_event_type_id_87077.cast(IntegerType)\n  should_process_views = f_should_process_views(col(\"log_dw_view\"),\n                                                seller_trx_event_id,\n                                                buyer_trx_event_id\n  ).cast(IntegerType)\n  v_transaction_event_pricing = f_get_transaction_event_pricing(\n    col(\"log_impbus_impressions_pricing.impression_event_pricing\"),\n    col(\"log_impbus_auction_event.auction_event_pricing\"),\n    col(\"log_impbus_impressions_pricing.buyer_charges\"),\n    col(\"log_impbus_impressions_pricing.seller_charges\"),\n    should_process_views\n  )\n  buyer_charges_pricing_terms = when(\n    is_not_null(\n      f_get_transaction_event_pricing(\n        col(\"log_impbus_impressions_pricing.impression_event_pricing\"),\n        col(\"log_impbus_auction_event.auction_event_pricing\"),\n        col(\"log_impbus_impressions_pricing.buyer_charges\"),\n        col(\"log_impbus_impressions_pricing.seller_charges\"),\n        f_should_process_views(col(\"log_dw_view\"),\n                               f_transaction_event_87047,\n                               f_transaction_event_87057\n        )\n      ).getField(\"buyer_charges\").getField(\"pricing_terms\")\n    ).cast(BooleanType),\n    v_transaction_event_pricing\n      .getField(\"buyer_charges\")\n      .getField(\"pricing_terms\")\n  ).otherwise(buyer_charges_pricing_terms)\n  seller_charges_pricing_terms = when(\n    is_not_null(\n      f_get_transaction_event_pricing(\n        col(\"log_impbus_impressions_pricing.impression_event_pricing\"),\n        col(\"log_impbus_auction_event.auction_event_pricing\"),\n        col(\"log_impbus_impressions_pricing.buyer_charges\"),\n        col(\"log_impbus_impressions_pricing.seller_charges\"),\n        f_should_process_views(col(\"log_dw_view\"),\n                               f_transaction_event_87047,\n                               f_transaction_event_87057\n        )\n      ).getField(\"seller_charges\").getField(\"pricing_terms\")\n    ).cast(BooleanType),\n    v_transaction_event_pricing\n      .getField(\"seller_charges\")\n      .getField(\"pricing_terms\")\n  ).otherwise(seller_charges_pricing_terms)\n  has_seller_transacted = _f_has_transacted.cast(BooleanType)\n  has_seller_transacted = when(\n    _f_has_transacted.cast(BooleanType) === lit(0),\n    v_transaction_event_pricing.getField(\"seller_transacted\").cast(BooleanType)\n  ).otherwise(has_seller_transacted.cast(BooleanType))\n  has_buyer_transacted = _f_has_transacted.cast(BooleanType)\n  has_buyer_transacted = when(\n    _f_has_transacted.cast(BooleanType) === lit(0),\n    coalesce(v_transaction_event_pricing\n               .getField(\"buyer_transacted\")\n               .cast(BooleanType),\n             lit(0).cast(BooleanType)\n    )\n  ).otherwise(has_buyer_transacted)\n  payment_type_normalized = when(\n    _f_is_buy_side === lit(1),\n    coalesce(col(\"log_dw_bid.payment_type\").cast(IntegerType),\n             col(\"log_impbus_impressions.payment_type\").cast(IntegerType),\n             lit(999)\n    )\n  ).otherwise(\n      coalesce(col(\"log_impbus_impressions.payment_type\").cast(IntegerType),\n               lit(999)\n      )\n    )\n    .cast(IntegerType)\n  payment_type_normalized = when(\n    (((((((_f_is_buy_side === lit(1))\n      .and(is_not_null(col(\"buyer_member_id\").cast(IntegerType))))\n      .and(is_not_null(col(\"log_dw_bid.member_id\").cast(IntegerType))))\n      .and(imp_type.isin(lit(6), lit(7))))\n      .and(\n        col(\"buyer_member_id\").cast(IntegerType) === col(\"log_dw_bid.member_id\")\n          .cast(IntegerType)\n      ))\n      .and(f_transaction_event_87047 =!= lit(0)))\n      .and(f_transaction_event_87057 =!= lit(0)))\n      .and(f_transaction_event_87047 =!= f_transaction_event_87057), {\n      payment_type_normalized = when(buyer_trx_event_id === lit(1), lit(0))\n        .otherwise(payment_type_normalized)\n        .cast(IntegerType)\n      payment_type_normalized = when(buyer_trx_event_id.isin(lit(16),\n                                                             lit(15),\n                                                             lit(14),\n                                                             lit(13),\n                                                             lit(9),\n                                                             lit(8),\n                                                             lit(7),\n                                                             lit(6),\n                                                             lit(2),\n                                                             lit(5)\n                                     ),\n                                     lit(5)\n      ).otherwise(payment_type_normalized).cast(IntegerType)\n      payment_type_normalized\n    }\n  ).otherwise(payment_type_normalized).cast(IntegerType)\n  revenue_type_normalized =\n    when(_f_is_buy_side === lit(1),\n         coalesce(col(\"log_dw_bid.revenue_type\").cast(IntegerType), lit(0))\n    ).when(is_not_null(col(\"log_dw_bid.payment_type\").cast(IntegerType))\n              .and(col(\"log_dw_bid.payment_type\").cast(IntegerType) === lit(1)),\n            lit(3)\n      )\n      .when(is_not_null(col(\"log_dw_bid.payment_type\").cast(IntegerType))\n              .and(col(\"log_dw_bid.payment_type\").cast(IntegerType) === lit(2)),\n            lit(4)\n      )\n      .otherwise(lit(0))\n      .cast(IntegerType)\n  revenue_type_normalized = when(\n    (((_f_is_buy_side === lit(1))\n      .and(is_not_null(col(\"log_dw_bid.log_type\").cast(IntegerType))))\n      .and(imp_type.isin(lit(6), lit(7))))\n      .and(col(\"log_dw_bid.log_type\").cast(IntegerType) === lit(2)), {\n      revenue_type_normalized = when(\n        ((seller_trx_event_id =!= lit(0))\n          .and(buyer_trx_event_id =!= lit(0)))\n          .and(seller_trx_event_id =!= buyer_trx_event_id), {\n          revenue_type_normalized = when(seller_trx_event_id === lit(1), lit(0))\n            .otherwise(revenue_type_normalized)\n            .cast(IntegerType)\n          revenue_type_normalized = when(seller_trx_event_id.isin(lit(16),\n                                                                  lit(15),\n                                                                  lit(14),\n                                                                  lit(13),\n                                                                  lit(9),\n                                                                  lit(8),\n                                                                  lit(7),\n                                                                  lit(6),\n                                                                  lit(2),\n                                                                  lit(5)\n                                         ),\n                                         lit(9)\n          ).otherwise(revenue_type_normalized).cast(IntegerType)\n          revenue_type_normalized\n        }\n      ).otherwise(revenue_type_normalized).cast(IntegerType)\n      revenue_type_normalized = when(\n        (seller_trx_event_id === lit(2)).and(buyer_trx_event_id === lit(2)),\n        lit(9)\n      ).otherwise(revenue_type_normalized).cast(IntegerType)\n      revenue_type_normalized\n    }\n  ).otherwise(revenue_type_normalized).cast(IntegerType)\n  buyer_charges_pricing_terms = f_zero_pricing_term_amount_if_non_cpm(\n    imp_type,\n    payment_type_normalized,\n    revenue_type_normalized,\n    buyer_charges_pricing_terms\n  )\n  seller_charges_pricing_terms = f_zero_pricing_term_amount_if_non_cpm(\n    imp_type,\n    payment_type_normalized,\n    revenue_type_normalized,\n    seller_charges_pricing_terms\n  )\n  view_detection_enabled = _f_view_detection_enabled.cast(IntegerType)\n  view_measurable =\n    f_view_measurable(view_detection_enabled,\n                      col(\"log_impbus_view.view_result\").cast(IntegerType)\n    ).cast(IntegerType)\n  viewable = f_viewable(view_measurable,\n                        col(\"log_impbus_view.view_result\").cast(IntegerType)\n  ).cast(IntegerType)\n  view_non_measurable_reason = f_view_non_measurable_reason(\n    view_detection_enabled,\n    col(\"log_impbus_view.view_result\").cast(IntegerType)\n  ).cast(IntegerType)\n  viewdef_definition_id = _f_viewdef_definition_id.cast(IntegerType)\n  viewdef_viewable = f_viewdef_viewable(\n    viewdef_definition_id,\n    view_measurable,\n    col(\"log_impbus_view.viewdef_view_result\").cast(IntegerType)\n  ).cast(IntegerType)\n  view_result =\n    f_view_result(view_detection_enabled,\n                  col(\"log_impbus_view.view_result\").cast(IntegerType)\n    ).cast(IntegerType)\n  is_budget_table_imp_type = when(\n    ((((col(\"imp_type\").cast(IntegerType) === lit(5))\n      .or(col(\"imp_type\").cast(IntegerType) === lit(7)))\n      .or(col(\"imp_type\").cast(IntegerType) === lit(9)))\n      .or(col(\"imp_type\").cast(IntegerType) === lit(11)))\n      .or(\n        is_not_null(col(\"log_dw_bid_deal\"))\n          .and(col(\"imp_type\").cast(IntegerType) === lit(6))\n      ),\n    lit(1)\n  ).otherwise(is_budget_table_imp_type).cast(IntegerType)\n  is_not_roadblock_secondary = when(\n    isnull(col(\"log_dw_bid.impression_transaction_type\")).or(\n      col(\"log_dw_bid.impression_transaction_type\").cast(IntegerType) =!= lit(2)\n    ),\n    lit(1)\n  ).otherwise(is_not_roadblock_secondary).cast(IntegerType)\n  is_external_imp_type = when(col(\"imp_type\").cast(IntegerType) === lit(9),\n                              lit(1)\n  ).otherwise(is_external_imp_type).cast(IntegerType)\n  is_not_video_imp = when(\n    isnull(col(\"log_dw_bid.revenue_event_type_id\")).or(\n      is_not_null(col(\"log_dw_bid.revenue_event_type_id\").cast(IntegerType))\n        .and(\n          col(\"log_dw_bid.revenue_event_type_id\").cast(IntegerType) =!= lit(5)\n        )\n    ),\n    lit(1)\n  ).otherwise(is_not_video_imp).cast(IntegerType)\n  imps_for_budget_caps_pacing = ((is_budget_table_imp_type === lit(1))\n    .and(\n      (is_not_roadblock_secondary === lit(1))\n        .or(is_external_imp_type === lit(1))\n    ))\n    .and(is_not_video_imp === lit(1))\n    .cast(IntegerType)\n  commission_cpm =\n    coalesce(col(\"log_dw_bid.commission_cpm\"), lit(0)).cast(DoubleType)\n  commission_revshare =\n    coalesce(col(\"log_dw_bid.commission_revshare\"), lit(0)).cast(DoubleType)\n  serving_fees_cpm =\n    coalesce(col(\"log_dw_bid.serving_fees_cpm\"), lit(0)).cast(DoubleType)\n  serving_fees_revshare =\n    coalesce(col(\"log_dw_bid.serving_fees_revshare\"), lit(0)).cast(DoubleType)\n  media_buy_cost = when(\n    imp_type === lit(6),\n    when(is_not_null(col(\"log_impbus_impressions.media_buy_cost\")).cast(\n           BooleanType\n         ),\n         math_min(col(\"log_impbus_impressions.media_buy_cost\"), lit(999.0))\n    ).otherwise(media_buy_cost)\n  ).when(is_not_null(col(\"log_dw_bid.media_buy_cost\")).cast(BooleanType),\n          math_min(col(\"log_dw_bid.media_buy_cost\"), lit(999.0))\n    )\n    .otherwise(media_buy_cost)\n    .cast(DoubleType)\n  media_buy_rev_share_pct =\n    coalesce(col(\"log_impbus_impressions.media_buy_rev_share_pct\"), lit(0))\n      .cast(DoubleType)\n  booked_revenue_dollars =\n    when(is_not_null(col(\"log_dw_bid.revenue_info.booked_revenue_dollars\"))\n           .cast(BooleanType),\n         col(\"log_dw_bid.revenue_info.booked_revenue_dollars\")\n    ).otherwise(booked_revenue_dollars).cast(DoubleType)\n  booked_revenue_dollars = when(\n    is_not_null(col(\"log_dw_view.revenue_info.booked_revenue_dollars\")).cast(\n      BooleanType\n    ),\n    booked_revenue_dollars + col(\n      \"log_dw_view.revenue_info.booked_revenue_dollars\"\n    )\n  ).otherwise(booked_revenue_dollars).cast(DoubleType)\n  booked_revenue_adv_curr =\n    when(is_not_null(col(\"log_dw_bid.revenue_info.booked_revenue_adv_curr\"))\n           .cast(BooleanType),\n         col(\"log_dw_bid.revenue_info.booked_revenue_adv_curr\")\n    ).otherwise(booked_revenue_adv_curr).cast(DoubleType)\n  booked_revenue_adv_curr = when(\n    is_not_null(col(\"log_dw_view.revenue_info.booked_revenue_adv_curr\")).cast(\n      BooleanType\n    ),\n    booked_revenue_adv_curr + col(\n      \"log_dw_view.revenue_info.booked_revenue_adv_curr\"\n    )\n  ).otherwise(booked_revenue_adv_curr).cast(DoubleType)\n  v_pricing_term = when(\n    ((f_is_non_cpm_payment_or_payment(imp_type,\n                                      payment_type_normalized,\n                                      revenue_type_normalized\n    ) === lit(0))\n      .or(is_dw_normalized === lit(1)))\n      .or(\n        f_should_process_views(col(\"log_dw_view\"),\n                               f_transaction_event_87047,\n                               f_transaction_event_87057\n        ) === lit(1)\n      ),\n    f_get_pricing_term(lit(1), buyer_charges_pricing_terms)\n  ).otherwise(v_pricing_term)\n  auction_service_fees = when(\n    ((((f_is_non_cpm_payment_or_payment(imp_type,\n                                        payment_type_normalized,\n                                        revenue_type_normalized\n    ) === lit(0))\n      .or(is_dw_normalized === lit(1)))\n      .or(\n        f_should_process_views(col(\"log_dw_view\"),\n                               f_transaction_event_87047,\n                               f_transaction_event_87057\n        ) === lit(1)\n      ))\n      .and(\n        is_not_null(\n          f_get_pricing_term(lit(1), buyer_charges_pricing_terms)\n            .getField(\"amount\")\n        ).and(\n          f_get_pricing_term(lit(1), buyer_charges_pricing_terms)\n            .getField(\"amount\") > lit(0)\n        )\n      ))\n      .and(\n        isnull(\n          f_get_pricing_term(lit(1), buyer_charges_pricing_terms)\n            .getField(\"is_deduction\")\n        ).or(\n          is_not_null(\n            f_get_pricing_term(lit(1), buyer_charges_pricing_terms)\n              .getField(\"is_deduction\")\n          ).and(\n            f_get_pricing_term(lit(1), buyer_charges_pricing_terms)\n              .getField(\"is_deduction\") === lit(0)\n          )\n        )\n      ),\n    f_get_pricing_term(lit(1), buyer_charges_pricing_terms).getField(\n      \"amount\"\n    ) / lit(1000)\n  ).otherwise(auction_service_fees).cast(DoubleType)\n  v_pricing_term = when(\n    ((f_is_non_cpm_payment_or_payment(imp_type,\n                                      payment_type_normalized,\n                                      revenue_type_normalized\n    ) === lit(0))\n      .or(is_dw_normalized === lit(1)))\n      .or(\n        f_should_process_views(col(\"log_dw_view\"),\n                               f_transaction_event_87047,\n                               f_transaction_event_87057\n        ) === lit(1)\n      ),\n    f_get_pricing_term(lit(1), buyer_charges_pricing_terms)\n  ).otherwise(v_pricing_term)\n  auction_service_deduction = when(\n    ((((f_is_non_cpm_payment_or_payment(imp_type,\n                                        payment_type_normalized,\n                                        revenue_type_normalized\n    ) === lit(0))\n      .or(is_dw_normalized === lit(1)))\n      .or(\n        f_should_process_views(col(\"log_dw_view\"),\n                               f_transaction_event_87047,\n                               f_transaction_event_87057\n        ) === lit(1)\n      ))\n      .and(\n        is_not_null(\n          f_get_pricing_term(lit(1), buyer_charges_pricing_terms)\n            .getField(\"amount\")\n        ).and(\n          f_get_pricing_term(lit(1), buyer_charges_pricing_terms)\n            .getField(\"amount\") > lit(0)\n        )\n      ))\n      .and(\n        is_not_null(\n          f_get_pricing_term(lit(1), buyer_charges_pricing_terms)\n            .getField(\"is_deduction\")\n        ).and(\n          f_get_pricing_term(lit(1), buyer_charges_pricing_terms)\n            .getField(\"is_deduction\") === lit(1)\n        )\n      ),\n    f_get_pricing_term(lit(1), buyer_charges_pricing_terms).getField(\n      \"amount\"\n    ) / lit(1000)\n  ).otherwise(auction_service_deduction).cast(DoubleType)\n  v_pricing_term = when(\n    ((f_is_non_cpm_payment_or_payment(imp_type,\n                                      payment_type_normalized,\n                                      revenue_type_normalized\n    ) === lit(0))\n      .or(is_dw_normalized === lit(1)))\n      .or(\n        f_should_process_views(col(\"log_dw_view\"),\n                               f_transaction_event_87047,\n                               f_transaction_event_87057\n        ) === lit(1)\n      ),\n    f_get_pricing_term(lit(11), buyer_charges_pricing_terms)\n  ).otherwise(v_pricing_term)\n  creative_overage_fees = when(\n    ((f_is_non_cpm_payment_or_payment(imp_type,\n                                      payment_type_normalized,\n                                      revenue_type_normalized\n    ) === lit(0))\n      .or(is_dw_normalized === lit(1)))\n      .or(\n        f_should_process_views(col(\"log_dw_view\"),\n                               f_transaction_event_87047,\n                               f_transaction_event_87057\n        ) === lit(1)\n      ),\n    when(\n      is_not_null(\n        f_get_pricing_term(lit(11), buyer_charges_pricing_terms)\n          .getField(\"amount\")\n      ).and(\n        f_get_pricing_term(lit(11), buyer_charges_pricing_terms)\n          .getField(\"amount\") > lit(0)\n      ),\n      f_get_pricing_term(lit(11), buyer_charges_pricing_terms).getField(\n        \"amount\"\n      ) / lit(1000)\n    ).otherwise(creative_overage_fees)\n  ).otherwise(creative_overage_fees).cast(DoubleType)\n  v_pricing_term = when(\n    ((f_is_non_cpm_payment_or_payment(imp_type,\n                                      payment_type_normalized,\n                                      revenue_type_normalized\n    ) === lit(0))\n      .or(is_dw_normalized === lit(1)))\n      .or(\n        f_should_process_views(col(\"log_dw_view\"),\n                               f_transaction_event_87047,\n                               f_transaction_event_87057\n        ) === lit(1)\n      ),\n    f_get_pricing_term(lit(51), buyer_charges_pricing_terms)\n  ).otherwise(v_pricing_term)\n  discrepancy_allowance = when(\n    ((f_is_non_cpm_payment_or_payment(imp_type,\n                                      payment_type_normalized,\n                                      revenue_type_normalized\n    ) === lit(0))\n      .or(is_dw_normalized === lit(1)))\n      .or(\n        f_should_process_views(col(\"log_dw_view\"),\n                               f_transaction_event_87047,\n                               f_transaction_event_87057\n        ) === lit(1)\n      ),\n    when(\n      is_not_null(\n        f_get_pricing_term(lit(51), buyer_charges_pricing_terms)\n          .getField(\"amount\")\n      ).and(\n        f_get_pricing_term(lit(51), buyer_charges_pricing_terms)\n          .getField(\"amount\") > lit(0)\n      ),\n      f_get_pricing_term(lit(51), buyer_charges_pricing_terms).getField(\n        \"amount\"\n      ) / lit(1000)\n    ).otherwise(discrepancy_allowance)\n  ).otherwise(discrepancy_allowance).cast(DoubleType)\n  buyer_spend_microcents = when(\n    isnull(col(\"log_dw_bid.payment_type\")).or(\n      (is_not_null(col(\"log_dw_bid.payment_type\").cast(IntegerType))\n        .and(col(\"log_dw_bid.payment_type\").cast(IntegerType) =!= lit(1)))\n        .and(col(\"log_dw_bid.payment_type\").cast(IntegerType) =!= lit(2))\n    ),\n    coalesce(\n      v_transaction_event_pricing.getField(\"gross_payment_value_microcents\"),\n      lit(0)\n    )\n  ).otherwise(buyer_spend_microcents).cast(DoubleType)\n  seller_revenue_microcents = when(\n    isnull(col(\"log_dw_bid.payment_type\")).or(\n      (is_not_null(col(\"log_dw_bid.payment_type\").cast(IntegerType))\n        .and(col(\"log_dw_bid.payment_type\").cast(IntegerType) =!= lit(1)))\n        .and(col(\"log_dw_bid.payment_type\").cast(IntegerType) =!= lit(2))\n    ),\n    coalesce(v_transaction_event_pricing.getField(\"seller_revenue_microcents\"),\n             lit(0)\n    )\n  ).otherwise(seller_revenue_microcents).cast(DoubleType)\n  buyer_spend_cpm = (buyer_spend_microcents / lit(100000)).cast(DoubleType)\n  seller_revenue_cpm =\n    (seller_revenue_microcents / lit(100000)).cast(DoubleType)\n  media_cost_dollars_cpm = f_get_media_cost_dollars_cpm(\n    imp_type,\n    payment_type_normalized,\n    revenue_type_normalized,\n    media_buy_cost,\n    media_buy_rev_share_pct,\n    seller_revenue_cpm,\n    buyer_spend_cpm,\n    booked_revenue_dollars,\n    commission_cpm,\n    commission_revshare,\n    serving_fees_cpm,\n    serving_fees_revshare,\n    col(\"log_impbus_impressions.apply_cost_on_default\").cast(IntegerType),\n    lit(0.0).cast(DoubleType)\n  ).cast(DoubleType)\n  seller_deduction_term_id_1 = when(\n    ((f_is_non_cpm_payment_or_payment(imp_type,\n                                      payment_type_normalized,\n                                      revenue_type_normalized\n    ) === lit(0))\n      .and(\n        is_not_null(\n          f_get_pricing_term(lit(1), seller_charges_pricing_terms)\n            .getField(\"amount\")\n        ).cast(BooleanType)\n      ))\n      .and(\n        is_not_null(\n          f_get_pricing_term(lit(1), seller_charges_pricing_terms)\n            .getField(\"is_deduction\")\n        ).and(\n          f_get_pricing_term(lit(1), seller_charges_pricing_terms)\n            .getField(\"is_deduction\") === lit(1)\n        )\n      ),\n    f_get_pricing_term(lit(1), seller_charges_pricing_terms).getField(\n      \"amount\"\n    ) / lit(1000)\n  ).otherwise(seller_deduction_term_id_1).cast(DoubleType)\n  seller_deduction_term_id_74 = when(\n    ((f_is_non_cpm_payment_or_payment(imp_type,\n                                      payment_type_normalized,\n                                      revenue_type_normalized\n    ) === lit(0))\n      .and(\n        is_not_null(\n          f_get_pricing_term(lit(74), seller_charges_pricing_terms)\n            .getField(\"amount\")\n        ).cast(BooleanType)\n      ))\n      .and(\n        is_not_null(\n          f_get_pricing_term(lit(74), seller_charges_pricing_terms)\n            .getField(\"is_deduction\")\n        ).and(\n          f_get_pricing_term(lit(74), seller_charges_pricing_terms)\n            .getField(\"is_deduction\") === lit(1)\n        )\n      ),\n    f_get_pricing_term(lit(74), seller_charges_pricing_terms).getField(\n      \"amount\"\n    ) / lit(1000)\n  ).otherwise(seller_deduction_term_id_74).cast(DoubleType)\n  seller_deduction = when(\n    f_is_non_cpm_payment_or_payment(imp_type,\n                                    payment_type_normalized,\n                                    revenue_type_normalized\n    ) === lit(0),\n    math_max(seller_deduction_term_id_1 + seller_deduction_term_id_74, lit(0))\n  ).otherwise(seller_deduction).cast(DoubleType)\n  deal_type = f_preempt_over_impression_88439.cast(IntegerType)\n  deal_id = when(\n    is_not_null(col(\"log_impbus_preempt.deal_id\").cast(IntegerType))\n      .and(col(\"log_impbus_preempt.deal_id\").cast(IntegerType) > lit(0)),\n    col(\"log_impbus_preempt.deal_id\").cast(IntegerType)\n  ).otherwise(deal_id).cast(IntegerType)\n  is_curated = when(\n    is_not_null(col(\"log_impbus_preempt.curated_deal_id\").cast(IntegerType))\n      .and(\n        col(\"log_impbus_preempt.curated_deal_id\").cast(IntegerType) > lit(0)\n      ),\n    lit(1)\n  ).otherwise(is_curated).cast(IntegerType)\n  curator_member_id = when(\n    is_not_null(col(\"log_impbus_preempt.curated_deal_id\").cast(IntegerType))\n      .and(\n        col(\"log_impbus_preempt.curated_deal_id\").cast(IntegerType) > lit(0)\n      ),\n    when(is_not_null(sup_common_deal_lookup).cast(BooleanType),\n         sup_common_deal_lookup.getField(\"member_id\")\n    ).otherwise(curator_member_id)\n  ).otherwise(curator_member_id).cast(IntegerType)\n  deal_id = when(\n    ((is_not_null(col(\"log_impbus_preempt.curated_deal_id\").cast(IntegerType))\n      .and(\n        col(\"log_impbus_preempt.curated_deal_id\").cast(IntegerType) > lit(0)\n      ))\n      .and(\n        (imp_type === lit(7))\n          .or((is_dw_normalized === lit(1)).and(imp_type === lit(6)))\n      ))\n      .and(imp_type === lit(7)),\n    col(\"log_impbus_preempt.curated_deal_id\").cast(IntegerType)\n  ).otherwise(deal_id).cast(IntegerType)\n  deal_type = when(\n    ((is_not_null(col(\"log_impbus_preempt.curated_deal_id\").cast(IntegerType))\n      .and(\n        col(\"log_impbus_preempt.curated_deal_id\").cast(IntegerType) > lit(0)\n      ))\n      .and(\n        (imp_type === lit(7))\n          .or((is_dw_normalized === lit(1)).and(imp_type === lit(6)))\n      ))\n      .and(imp_type === lit(7)),\n    lit(5)\n  ).otherwise(deal_type).cast(IntegerType)\n  creative_id = when(\n    ((isnull(col(\"log_dw_bid\"))\n      .or(imp_type === lit(3)))\n      .or(imp_type === lit(4)))\n      .or(\n        is_not_null(col(\"log_dw_bid.creative_id\").cast(IntegerType))\n          .and(col(\"log_dw_bid.creative_id\").cast(IntegerType) === lit(0))\n      ),\n    f_preempt_over_impression_88639\n  ).otherwise(col(\"log_dw_bid.creative_id\").cast(IntegerType)).cast(IntegerType)\n  advertiser_id = col(\"advertiser_id\").cast(IntegerType)\n  campaign_group_id = col(\"campaign_group_id\").cast(IntegerType)\n  insertion_order_id = col(\"insertion_order_id\").cast(IntegerType)\n  campaign_id = col(\"campaign_id\").cast(IntegerType)\n  campaign_id = when(\n    is_not_null(col(\"log_dw_bid.campaign_id\").cast(IntegerType))\n      .and(col(\"log_dw_bid.campaign_id\").cast(IntegerType) =!= lit(0)),\n    col(\"log_dw_bid.campaign_id\").cast(IntegerType)\n  ).otherwise(campaign_id).cast(IntegerType)\n  member_sales_tax_rate_pct = when(\n    is_not_null(col(\"log_dw_bid.data_costs\")).cast(BooleanType),\n    coalesce(lookup(\"sup_bidder_member_sales_tax_rate\", buyer_member_id)\n               .getField(\"sales_tax_rate_pct\"),\n             lit(0)\n    )\n  ).otherwise(member_sales_tax_rate_pct).cast(DoubleType)\n  data_costs = when(\n    is_not_null(col(\"log_dw_bid.data_costs\")).cast(BooleanType), {\n      data_costs = col(\"log_dw_bid.data_costs\")\n      data_costs = f_update_data_costs(\n        col(\"log_dw_bid.data_costs\"),\n        imp_type,\n        lit(0),\n        payment_type_normalized,\n        media_cost_dollars_cpm,\n        coalesce(lookup(\"sup_bidder_member_sales_tax_rate\", buyer_member_id)\n                   .getField(\"sales_tax_rate_pct\"),\n                 lit(0)\n        )\n      )\n      data_costs\n    }\n  ).otherwise(data_costs)\n  data_costs_deal = when(\n    f_transaction_event_87057 === lit(1),\n    when(\n      is_not_null(col(\"log_dw_bid_deal.data_costs\")).cast(BooleanType), {\n        data_costs_deal = col(\"log_dw_bid_deal.data_costs\")\n        data_costs_deal = f_update_data_costs_deal(\n          col(\"log_dw_bid_deal.data_costs\"),\n          coalesce(\n            lookup(\"sup_bidder_member_sales_tax_rate\",\n                   coalesce(sup_common_deal_lookup_2.getField(\"member_id\"),\n                            lit(0)\n                   )\n            ).getField(\"sales_tax_rate_pct\"),\n            lit(0)\n          )\n        )\n        data_costs_deal\n      }\n    ).otherwise(data_costs_deal)\n  ).otherwise(data_costs_deal)\n  media_buy_cost = when(\n    _f_is_buy_side === lit(0),\n    when(\n      isnull(col(\"log_dw_bid\")).and(\n        (f_is_error_imp(imp_type) === lit(1)).or(\n          (is_not_null(col(\"is_dw\").cast(IntegerType))\n            .and(col(\"is_dw\").cast(IntegerType) === lit(1)))\n            .and(imp_type.isin(lit(2), lit(4)))\n        )\n      ),\n      lit(0)\n    ).otherwise(media_buy_cost)\n  ).otherwise(media_buy_cost).cast(DoubleType)\n  is_placeholder_bid = when(\n    _f_is_buy_side === lit(0),\n    when(\n      isnull(col(\"log_dw_bid\")).and(\n        (f_is_error_imp(imp_type) === lit(1)).or(\n          (is_not_null(col(\"is_dw\").cast(IntegerType))\n            .and(col(\"is_dw\").cast(IntegerType) === lit(1)))\n            .and(imp_type.isin(lit(2), lit(4)))\n        )\n      ),\n      lit(1)\n    ).otherwise(is_placeholder_bid)\n  ).otherwise(is_placeholder_bid).cast(IntegerType)\n  advertiser_id = when(\n    _f_is_buy_side === lit(0),\n    when(\n      isnull(col(\"log_dw_bid\")).and(\n        (f_is_error_imp(imp_type) === lit(1)).or(\n          (is_not_null(col(\"is_dw\").cast(IntegerType))\n            .and(col(\"is_dw\").cast(IntegerType) === lit(1)))\n            .and(imp_type.isin(lit(2), lit(4)))\n        )\n      ),\n      lit(null).cast(IntegerType)\n    ).when(\n        f_is_default_or_error_imp(imp_type) === lit(1), {\n          advertiser_id = when(f_is_default_or_error_imp(imp_type) === lit(1),\n                               lit(null).cast(IntegerType)\n          ).otherwise(advertiser_id).cast(IntegerType)\n          advertiser_id = when(f_is_error_imp(imp_type) === lit(1),\n                               lit(null).cast(IntegerType)\n          ).otherwise(advertiser_id).cast(IntegerType)\n          advertiser_id\n        }\n      )\n      .when(not(imp_type.isin(lit(5), lit(9), lit(2))),\n            lit(null).cast(IntegerType)\n      )\n      .otherwise(advertiser_id)\n  ).otherwise(advertiser_id).cast(IntegerType)\n  serving_fees_revshare = when(\n    _f_is_buy_side === lit(0),\n    when(\n      ((not(\n        isnull(col(\"log_dw_bid\")).and(\n          (f_is_error_imp(imp_type) === lit(1)).or(\n            (is_not_null(col(\"is_dw\").cast(IntegerType))\n              .and(col(\"is_dw\").cast(IntegerType) === lit(1)))\n              .and(imp_type.isin(lit(2), lit(4)))\n          )\n        )\n      )).and(not(f_is_default_or_error_imp(imp_type) === lit(1))))\n        .and(not(imp_type.isin(lit(5), lit(9), lit(2)))),\n      lit(null).cast(DoubleType)\n    ).otherwise(serving_fees_revshare)\n  ).otherwise(serving_fees_revshare).cast(DoubleType)\n  split_id = when(\n    _f_is_buy_side === lit(0),\n    when(\n      ((not(\n        isnull(col(\"log_dw_bid\")).and(\n          (f_is_error_imp(imp_type) === lit(1)).or(\n            (is_not_null(col(\"is_dw\").cast(IntegerType))\n              .and(col(\"is_dw\").cast(IntegerType) === lit(1)))\n              .and(imp_type.isin(lit(2), lit(4)))\n          )\n        )\n      )).and(not(f_is_default_or_error_imp(imp_type) === lit(1))))\n        .and(not(imp_type.isin(lit(5), lit(9), lit(2)))),\n      lit(0)\n    ).otherwise(split_id)\n  ).otherwise(split_id).cast(IntegerType)\n  booked_revenue_dollars = when(\n    _f_is_buy_side === lit(0),\n    when(\n      ((not(\n        isnull(col(\"log_dw_bid\")).and(\n          (f_is_error_imp(imp_type) === lit(1)).or(\n            (is_not_null(col(\"is_dw\").cast(IntegerType))\n              .and(col(\"is_dw\").cast(IntegerType) === lit(1)))\n              .and(imp_type.isin(lit(2), lit(4)))\n          )\n        )\n      )).and(not(f_is_default_or_error_imp(imp_type) === lit(1))))\n        .and(not(imp_type.isin(lit(5), lit(9), lit(2)))),\n      lit(0)\n    ).otherwise(booked_revenue_dollars)\n  ).otherwise(booked_revenue_dollars).cast(DoubleType)\n  serving_fees_cpm = when(\n    _f_is_buy_side === lit(0),\n    when(\n      ((not(\n        isnull(col(\"log_dw_bid\")).and(\n          (f_is_error_imp(imp_type) === lit(1)).or(\n            (is_not_null(col(\"is_dw\").cast(IntegerType))\n              .and(col(\"is_dw\").cast(IntegerType) === lit(1)))\n              .and(imp_type.isin(lit(2), lit(4)))\n          )\n        )\n      )).and(not(f_is_default_or_error_imp(imp_type) === lit(1))))\n        .and(not(imp_type.isin(lit(5), lit(9), lit(2)))),\n      lit(null).cast(DoubleType)\n    ).otherwise(serving_fees_cpm)\n  ).otherwise(serving_fees_cpm).cast(DoubleType)\n  insertion_order_id = when(\n    _f_is_buy_side === lit(0),\n    when(\n      ((not(\n        isnull(col(\"log_dw_bid\")).and(\n          (f_is_error_imp(imp_type) === lit(1)).or(\n            (is_not_null(col(\"is_dw\").cast(IntegerType))\n              .and(col(\"is_dw\").cast(IntegerType) === lit(1)))\n              .and(imp_type.isin(lit(2), lit(4)))\n          )\n        )\n      )).and(not(f_is_default_or_error_imp(imp_type) === lit(1))))\n        .and(not(imp_type.isin(lit(5), lit(9), lit(2)))),\n      lit(null).cast(IntegerType)\n    ).otherwise(insertion_order_id)\n  ).otherwise(insertion_order_id).cast(IntegerType)\n  campaign_group_id = when(\n    _f_is_buy_side === lit(0),\n    when(\n      isnull(col(\"log_dw_bid\")).and(\n        (f_is_error_imp(imp_type) === lit(1)).or(\n          (is_not_null(col(\"is_dw\").cast(IntegerType))\n            .and(col(\"is_dw\").cast(IntegerType) === lit(1)))\n            .and(imp_type.isin(lit(2), lit(4)))\n        )\n      ),\n      lit(null).cast(IntegerType)\n    ).when(\n        f_is_default_or_error_imp(imp_type) === lit(1), {\n          campaign_group_id =\n            when(f_is_default_or_error_imp(imp_type) === lit(1),\n                 lit(null).cast(IntegerType)\n            ).otherwise(campaign_group_id).cast(IntegerType)\n          campaign_group_id = when(f_is_error_imp(imp_type) === lit(1),\n                                   lit(null).cast(IntegerType)\n          ).otherwise(campaign_group_id).cast(IntegerType)\n          campaign_group_id\n        }\n      )\n      .when(not(imp_type.isin(lit(5), lit(9), lit(2))),\n            lit(null).cast(IntegerType)\n      )\n      .otherwise(campaign_group_id)\n  ).otherwise(campaign_group_id).cast(IntegerType)\n  commission_cpm = when(\n    _f_is_buy_side === lit(0),\n    when(\n      ((not(\n        isnull(col(\"log_dw_bid\")).and(\n          (f_is_error_imp(imp_type) === lit(1)).or(\n            (is_not_null(col(\"is_dw\").cast(IntegerType))\n              .and(col(\"is_dw\").cast(IntegerType) === lit(1)))\n              .and(imp_type.isin(lit(2), lit(4)))\n          )\n        )\n      )).and(not(f_is_default_or_error_imp(imp_type) === lit(1))))\n        .and(not(imp_type.isin(lit(5), lit(9), lit(2)))),\n      lit(0)\n    ).otherwise(commission_cpm)\n  ).otherwise(commission_cpm).cast(DoubleType)\n  commission_revshare = when(\n    _f_is_buy_side === lit(0),\n    when(\n      ((not(\n        isnull(col(\"log_dw_bid\")).and(\n          (f_is_error_imp(imp_type) === lit(1)).or(\n            (is_not_null(col(\"is_dw\").cast(IntegerType))\n              .and(col(\"is_dw\").cast(IntegerType) === lit(1)))\n              .and(imp_type.isin(lit(2), lit(4)))\n          )\n        )\n      )).and(not(f_is_default_or_error_imp(imp_type) === lit(1))))\n        .and(not(imp_type.isin(lit(5), lit(9), lit(2)))),\n      lit(null).cast(DoubleType)\n    ).otherwise(commission_revshare)\n  ).otherwise(commission_revshare).cast(DoubleType)\n  campaign_id = when(\n    _f_is_buy_side === lit(0),\n    when(\n      ((not(\n        isnull(col(\"log_dw_bid\")).and(\n          (f_is_error_imp(imp_type) === lit(1)).or(\n            (is_not_null(col(\"is_dw\").cast(IntegerType))\n              .and(col(\"is_dw\").cast(IntegerType) === lit(1)))\n              .and(imp_type.isin(lit(2), lit(4)))\n          )\n        )\n      )).and(not(f_is_default_or_error_imp(imp_type) === lit(1))))\n        .and(not(imp_type.isin(lit(5), lit(9), lit(2)))),\n      lit(null).cast(IntegerType)\n    ).otherwise(campaign_id)\n  ).otherwise(campaign_id).cast(IntegerType)\n  revenue_value = when(\n    _f_is_buy_side === lit(0),\n    when(\n      ((not(\n        isnull(col(\"log_dw_bid\")).and(\n          (f_is_error_imp(imp_type) === lit(1)).or(\n            (is_not_null(col(\"is_dw\").cast(IntegerType))\n              .and(col(\"is_dw\").cast(IntegerType) === lit(1)))\n              .and(imp_type.isin(lit(2), lit(4)))\n          )\n        )\n      )).and(not(f_is_default_or_error_imp(imp_type) === lit(1))))\n        .and(not(imp_type.isin(lit(5), lit(9), lit(2)))),\n      lit(0)\n    ).otherwise(revenue_value)\n  ).otherwise(revenue_value).cast(DoubleType)\n  virtual_log_dw_bid = f_create_agg_dw_impressions_virtual_log_dw_bid_10949800(\n    virtual_log_dw_bid,\n    _f_is_buy_side,\n    col(\"log_dw_bid\"),\n    f_is_error_imp(imp_type),\n    col(\"is_dw\"),\n    imp_type,\n    f_is_default_or_error_imp(imp_type),\n    col(\"log_impbus_impressions.payment_type\"),\n    seller_trx_event_id\n  )\n  booked_revenue_adv_curr = when(\n    _f_is_buy_side === lit(0),\n    when(\n      ((not(\n        isnull(col(\"log_dw_bid\")).and(\n          (f_is_error_imp(imp_type) === lit(1)).or(\n            (is_not_null(col(\"is_dw\").cast(IntegerType))\n              .and(col(\"is_dw\").cast(IntegerType) === lit(1)))\n              .and(imp_type.isin(lit(2), lit(4)))\n          )\n        )\n      )).and(not(f_is_default_or_error_imp(imp_type) === lit(1))))\n        .and(not(imp_type.isin(lit(5), lit(9), lit(2)))),\n      lit(0)\n    ).otherwise(booked_revenue_adv_curr)\n  ).otherwise(booked_revenue_adv_curr).cast(DoubleType)\n  campaign_id = when(is_not_null(col(\"log_dw_bid_deal\")).cast(BooleanType),\n                     col(\"campaign_id\").cast(IntegerType)\n  ).otherwise(campaign_id).cast(IntegerType)\n  advertiser_id = when(\n    is_not_null(col(\"log_dw_bid_deal\")).cast(BooleanType), {\n      advertiser_id = col(\"advertiser_id\").cast(IntegerType)\n      advertiser_id = when(\n        imp_type === lit(6),\n        when(\n          is_not_null(col(\"log_dw_bid_deal.advertiser_id\").cast(IntegerType))\n            .and(\n              col(\"log_dw_bid_deal.advertiser_id\").cast(IntegerType) =!= lit(0)\n            ),\n          col(\"log_dw_bid_deal.advertiser_id\").cast(IntegerType)\n        ).otherwise(advertiser_id)\n      ).otherwise(advertiser_id).cast(IntegerType)\n      advertiser_id\n    }\n  ).otherwise(advertiser_id).cast(IntegerType)\n  campaign_group_id = when(\n    is_not_null(col(\"log_dw_bid_deal\")).cast(BooleanType), {\n      campaign_group_id = col(\"campaign_group_id\").cast(IntegerType)\n      campaign_group_id = when(\n        imp_type === lit(6),\n        when(\n          is_not_null(\n            col(\"log_dw_bid_deal.campaign_group_id\").cast(IntegerType)\n          ).and(\n            col(\"log_dw_bid_deal.campaign_group_id\").cast(IntegerType) =!= lit(\n              0\n            )\n          ),\n          col(\"log_dw_bid_deal.campaign_group_id\").cast(IntegerType)\n        ).otherwise(campaign_group_id)\n      ).otherwise(campaign_group_id).cast(IntegerType)\n      campaign_group_id\n    }\n  ).otherwise(campaign_group_id).cast(IntegerType)\n  insertion_order_id = when(\n    is_not_null(col(\"log_dw_bid_deal\")).cast(BooleanType), {\n      insertion_order_id = col(\"insertion_order_id\").cast(IntegerType)\n      insertion_order_id = when(\n        imp_type === lit(6),\n        when(\n          is_not_null(\n            col(\"log_dw_bid_deal.insertion_order_id\").cast(IntegerType)\n          ).and(\n            col(\"log_dw_bid_deal.insertion_order_id\").cast(IntegerType) =!= lit(\n              0\n            )\n          ),\n          col(\"log_dw_bid_deal.insertion_order_id\").cast(IntegerType)\n        ).otherwise(insertion_order_id)\n      ).otherwise(insertion_order_id).cast(IntegerType)\n      insertion_order_id\n    }\n  ).otherwise(insertion_order_id).cast(IntegerType)\n  flight_id = when(\n    (is_not_null(col(\"log_dw_bid_deal\"))\n      .cast(BooleanType)\n      .and(imp_type === lit(6)))\n      .and(\n        is_not_null(\n          col(\"log_dw_bid_deal.campaign_group_budget_interval_id\")\n            .cast(IntegerType)\n        ).and(\n          col(\"log_dw_bid_deal.campaign_group_budget_interval_id\")\n            .cast(IntegerType) =!= lit(0)\n        )\n      ),\n    col(\"log_dw_bid_deal.campaign_group_budget_interval_id\").cast(IntegerType)\n  ).otherwise(flight_id).cast(IntegerType)\n  billing_period_id = when(\n    (is_not_null(col(\"log_dw_bid_deal\"))\n      .cast(BooleanType)\n      .and(imp_type === lit(6)))\n      .and(\n        is_not_null(\n          col(\"log_dw_bid_deal.insertion_order_budget_interval_id\")\n            .cast(IntegerType)\n        ).and(\n          col(\"log_dw_bid_deal.insertion_order_budget_interval_id\")\n            .cast(IntegerType) =!= lit(0)\n        )\n      ),\n    col(\"log_dw_bid_deal.insertion_order_budget_interval_id\").cast(IntegerType)\n  ).otherwise(billing_period_id).cast(IntegerType)\n  should_zero_seller_revenue = f_should_zero_seller_revenue(\n    col(\"log_dw_bid\"),\n    col(\"imp_type\").cast(IntegerType),\n    revenue_type_normalized,\n    col(\"seller_member_id\").cast(IntegerType),\n    col(\n      \"log_impbus_impressions_pricing.impression_event_pricing.seller_revenue_microcents\"\n    ).cast(LongType)\n  ).cast(BooleanType)\n  netflix_ppid = when(\n    is_not_null(col(\"seller_member_id\").cast(IntegerType)).and(\n      ((col(\"seller_member_id\").cast(IntegerType) === lit(14007))\n        .or(col(\"seller_member_id\").cast(IntegerType) === lit(14120)))\n        .or(col(\"seller_member_id\").cast(IntegerType) === lit(14136))\n    ),\n    when(\n      is_not_null(_f_find_personal_identifier).and(\n        is_not_null(_f_find_personal_identifier.getField(\"identity_value\"))\n      ),\n      _f_find_personal_identifier.getField(\"identity_value\")\n    ).otherwise(netflix_ppid)\n  ).otherwise(netflix_ppid)\n  f_create_agg_dw_impressions_return_11668614(\n    curator_member_id,\n    discrepancy_allowance,\n    should_process_views,\n    buyer_member_id,\n    imps_for_budget_caps_pacing,\n    imp_type,\n    is_curated,\n    view_detection_enabled,\n    buyer_trx_event_type_id,\n    commission_revshare,\n    creative_overage_fees,\n    viewdef_definition_id,\n    virtual_log_dw_bid,\n    has_buyer_transacted,\n    payment_type_normalized,\n    seller_trx_event_id,\n    seller_revenue_cpm,\n    insertion_order_id,\n    revenue_type_normalized,\n    billing_period_id,\n    viewdef_viewable,\n    split_id,\n    data_costs_deal,\n    f_preempt_over_impression_94298,\n    commission_cpm,\n    v_transaction_event_pricing,\n    buyer_trx_event_id,\n    campaign_group_id,\n    has_seller_transacted,\n    revenue_value,\n    netflix_ppid,\n    campaign_group_type_id,\n    should_zero_seller_revenue,\n    view_measurable,\n    advertiser_id,\n    media_cost_dollars_cpm,\n    creative_id,\n    f_preempt_over_impression_95337,\n    flight_id,\n    viewable,\n    auction_service_deduction,\n    media_buy_cost,\n    seller_deduction,\n    buyer_spend_cpm,\n    seller_trx_event_type_id,\n    auction_service_fees,\n    serving_fees_cpm,\n    data_costs,\n    sup_ip_range_lookup_count,\n    ttl,\n    view_result,\n    is_dw_normalized,\n    booked_revenue_adv_curr,\n    booked_revenue_dollars,\n    deal_id,\n    _f_is_buy_side,\n    deal_type,\n    campaign_id,\n    is_placeholder_bid,\n    serving_fees_revshare,\n    view_non_measurable_reason\n  )","language":"scala","description":""}