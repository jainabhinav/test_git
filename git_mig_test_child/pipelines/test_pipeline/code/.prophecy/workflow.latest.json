{
  "metainfo" : {
    "migrationVersions" : {
      "gemBuilderVersion" : "v1",
      "unitTestNullDataMigrated" : true
    },
    "functions" : { },
    "codeGenConfiguration" : {
      "editableConfig" : true,
      "plibVersion" : {
        "mavenVersion" : "8.8.2"
      },
      "sparkConfigJinjaEnabled" : true
    },
    "id" : "1",
    "uri" : "pipelines/test_pipeline",
    "sourceSuggestions" : [ ],
    "pipelineSettingsInfo" : {
      "applicationName" : "test_pipeline",
      "hasApplication" : true,
      "isFunctionsPackageDirDefined" : true,
      "isNullValuesInUnitTestsEnabled" : true,
      "sparkConfigOptions" : {
        "disableSparkCreationTimeConfigGeneration" : true
      }
    },
    "language" : "scala",
    "fabricId" : "1842",
    "frontEndLanguage" : "sql",
    "mode" : "batch",
    "udfs" : {
      "language" : "scala",
      "udfs" : [ ],
      "functionPackageName" : "adminprophecyioteam.gitmigtestchild.functions",
      "sharedFunctionPackageNames" : [ "io.prophecy.scalagems.functions", "io.prophecy.warehousegems.functions", "adminprophecyioteam.gitparenttestmig.functions" ]
    },
    "udafs" : {
      "language" : "scala",
      "code" : "package udfs\n\nimport org.apache.spark.sql.expressions._\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql._\n\n/**\n  * Here you can define your custom aggregate functions.\n  *\n  * Make sure to register your `udafs` in the register_udafs function below.\n  *\n  * Example:\n  *\n  * object GeometricMean extends UserDefinedAggregateFunction {\n  *   // This is the input fields for your aggregate function.\n  *   override def inputSchema: org.apache.spark.sql.types.StructType =\n  *     StructType(StructField(\"value\", DoubleType) :: Nil)\n  *\n  *   // This is the internal fields you keep for computing your aggregate.\n  *   override def bufferSchema: StructType = StructType(\n  *     StructField(\"count\", LongType) ::\n  *     StructField(\"product\", DoubleType) :: Nil\n  *   )\n  *\n  *   // This is the output type of your aggregatation function.\n  *   override def dataType: DataType = DoubleType\n  *\n  *   override def deterministic: Boolean = true\n  *\n  *   // This is the initial value for your buffer schema.\n  *   override def initialize(buffer: MutableAggregationBuffer): Unit = {\n  *     buffer(0) = 0L\n  *     buffer(1) = 1.0\n  *   }\n  *\n  *   // This is how to update your buffer schema given an input.\n  *   override def update(buffer: MutableAggregationBuffer, input: Row): Unit = {\n  *     buffer(0) = buffer.getAs[Long](0) + 1\n  *     buffer(1) = buffer.getAs[Double](1) * input.getAs[Double](0)\n  *   }\n  *\n  *   // This is how to merge two objects with the bufferSchema type.\n  *   override def merge(buffer1: MutableAggregationBuffer, buffer2: Row): Unit = {\n  *     buffer1(0) = buffer1.getAs[Long](0) + buffer2.getAs[Long](0)\n  *     buffer1(1) = buffer1.getAs[Double](1) * buffer2.getAs[Double](1)\n  *   }\n  *\n  *   // This is where you output the final value, given the final value of your bufferSchema.\n  *   override def evaluate(buffer: Row): Any = {\n  *     math.pow(buffer.getDouble(1), 1.toDouble / buffer.getLong(0))\n  *   }\n  * }\n  *\n  */\n\n\nobject UDAFs {\n  /**\n    * Registers UDAFs with Spark SQL\n    */\n  def registerUDAFs(spark: SparkSession): Unit = {\n    /**\n      * Example:\n      *\n      * spark.udf.register(\"gm\", GeometricMean)\n      *\n      */\n\n\n  }\n}\n"
    },
    "configuration" : {
      "common" : {
        "type" : "record",
        "fields" : [ ]
      },
      "oldCommon" : {
        "type" : "record",
        "fields" : [ ]
      },
      "fabrics" : { },
      "instances" : { },
      "selected" : "default",
      "nonEditable" : [ ],
      "isSubscribedPipelineWithPipelineConfigs" : false
    },
    "sparkConf" : [ {
      "name" : "spark.default.parallelism",
      "value" : "4"
    }, {
      "name" : "spark.sql.legacy.allowUntypedScalaUDF",
      "value" : "true"
    } ],
    "hadoopConf" : [ ],
    "codeMode" : "sparse",
    "buildSystem" : "maven",
    "externalDependencies" : [ ],
    "dependentProjectExternalDependencies" : [ {
      "projectUID" : "39",
      "projectName" : "ProphecySparkBasicsScala",
      "externalDependencies" : [ ]
    }, {
      "projectUID" : "40",
      "projectName" : "ProphecyWarehouseScala",
      "externalDependencies" : [ ]
    }, {
      "projectUID" : "22092",
      "projectName" : "git_parent_test_mig",
      "externalDependencies" : [ {
        "type" : "plibMaven",
        "modifiedAt" : "2025-03-10T05:04:34.719746Z",
        "name" : "plibMaven",
        "version" : "8.8.2",
        "id" : "481470693",
        "createdAt" : "2025-03-10T05:04:34.719746Z"
      } ]
    } ],
    "isImported" : false,
    "interimMode" : "Full",
    "interimModeEnabled" : true,
    "visualCodeInterimMode" : "Disabled",
    "recordsLimit" : {
      "enabled" : false,
      "value" : 1000
    },
    "topLevelPackage" : "io.prophecy.pipelines.test_pipeline",
    "configTopLevelPackage" : "io.prophecy.pipelines.test_pipeline",
    "configurationVersion" : "v2"
  },
  "connections" : [ {
    "id" : "YULrHePpGzpwWc3toKvaI$$LHIHXGgKsP1Uo5NI6LBTl",
    "source" : "FduUOO8DnfIVLFY8ULnLO$$7xZf-shynqNynQhQuF4q_",
    "sourcePort" : "1pH-KO-SY3CUYAatCbFsK$$l3ZiJhGGdvA2YRUVEoHkY",
    "target" : "TKB_CqnkUAKstxN284beh$$SaJBqyz5fXwvzuGr0pV1J",
    "targetPort" : "bpdP2Vctw0LB-4vXtt8Bp$$3HcXDb3GGACYxqh27g4Ky"
  }, {
    "id" : "8iRHhODLIkExF9ZngPaer$$wmqzHwQN7P-q_u07gHWIw",
    "source" : "zU0QtgOq1lCT6BScVLrYv$$fqiYqSZFt-077rHa0SmXd",
    "sourcePort" : "A4-p6W3jdZ-emNPwDLRVO$$buzzVqBJgZTa4LqKta4vr",
    "target" : "ZTPaxuA1IJ1XEUCRrxi5K$$m51ZZFYCPW81TOlRxnAT3",
    "targetPort" : "6U3FQR92ggcrGhJHgpw27$$Fc_ZPg68SWpeCRh58zlZ6"
  } ],
  "processes" : {
    "FduUOO8DnfIVLFY8ULnLO$$7xZf-shynqNynQhQuF4q_" : {
      "id" : "FduUOO8DnfIVLFY8ULnLO$$7xZf-shynqNynQhQuF4q_",
      "component" : "Source",
      "metadata" : {
        "label" : "csv_child_basics",
        "slug" : "csv_child_basics",
        "x" : -540,
        "y" : -140,
        "phase" : 0,
        "cache" : false,
        "detailedStats" : false,
        "isImported" : false
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "1pH-KO-SY3CUYAatCbFsK$$l3ZiJhGGdvA2YRUVEoHkY",
          "slug" : "out"
        } ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "properties" : {
        "datasetId" : "datasets/csv_child_basics"
      }
    },
    "TKB_CqnkUAKstxN284beh$$SaJBqyz5fXwvzuGr0pV1J" : {
      "id" : "TKB_CqnkUAKstxN284beh$$SaJBqyz5fXwvzuGr0pV1J",
      "component" : "Filter",
      "metadata" : {
        "label" : "Filter_1",
        "slug" : "Filter_1",
        "x" : -340,
        "y" : -140,
        "phase" : 0,
        "cache" : false,
        "detailedStats" : false,
        "isImported" : false
      },
      "ports" : {
        "inputs" : [ {
          "id" : "bpdP2Vctw0LB-4vXtt8Bp$$3HcXDb3GGACYxqh27g4Ky",
          "slug" : "in",
          "schema" : {
            "type" : "struct",
            "fields" : [ {
              "name" : "a",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "d",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            } ]
          },
          "isStreaming" : false
        } ],
        "outputs" : [ {
          "id" : "fUFBh4pD1JU6bolQENHiH$$t0cCpSpFLpF5DGb8BPM-G",
          "slug" : "out"
        } ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "properties" : {
        "columnsSelector" : [ ],
        "condition" : {
          "format" : "sql",
          "expression" : "true"
        }
      },
      "componentInfo" : {
        "gemId" : "gitUri=http://gitserver:3000/9gt3CHHz_team_9/pJIIcs5r_project_39.git&subPath=&tag=0.2.6.2.dev1&projectSubscriptionProjectId=39&path=gems/Filter",
        "projectName" : "ProphecySparkBasicsScala"
      }
    },
    "zU0QtgOq1lCT6BScVLrYv$$fqiYqSZFt-077rHa0SmXd" : {
      "id" : "zU0QtgOq1lCT6BScVLrYv$$fqiYqSZFt-077rHa0SmXd",
      "component" : "Source",
      "metadata" : {
        "label" : "csv_child_proj",
        "slug" : "csv_child_proj",
        "x" : -480,
        "y" : 40,
        "phase" : 0,
        "cache" : false,
        "detailedStats" : false,
        "isImported" : false
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "A4-p6W3jdZ-emNPwDLRVO$$buzzVqBJgZTa4LqKta4vr",
          "slug" : "out"
        } ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "properties" : {
        "datasetId" : "datasets/csv_child_proj"
      }
    },
    "ZTPaxuA1IJ1XEUCRrxi5K$$m51ZZFYCPW81TOlRxnAT3" : {
      "id" : "ZTPaxuA1IJ1XEUCRrxi5K$$m51ZZFYCPW81TOlRxnAT3",
      "component" : "Filter",
      "metadata" : {
        "label" : "Filter_2",
        "slug" : "Filter_2",
        "x" : -300,
        "y" : 40,
        "phase" : 0,
        "cache" : false,
        "detailedStats" : false,
        "isImported" : false
      },
      "ports" : {
        "inputs" : [ {
          "id" : "6U3FQR92ggcrGhJHgpw27$$Fc_ZPg68SWpeCRh58zlZ6",
          "slug" : "in",
          "schema" : {
            "type" : "struct",
            "fields" : [ {
              "name" : "a",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "s",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            } ]
          },
          "isStreaming" : false
        } ],
        "outputs" : [ {
          "id" : "2szfqvO74XonnOlM_v8Mf$$Fj9vRp8buWs4uv1grF_3G",
          "slug" : "out"
        } ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "properties" : {
        "columnsSelector" : [ ],
        "condition" : {
          "format" : "sql",
          "expression" : "true"
        }
      },
      "componentInfo" : {
        "gemId" : "gitUri=https://github.com/jainabhinav/test_git&subPath=/git_parent_test_mig&tag=git_parent_test_mig/0.4&projectSubscriptionProjectId=22092&path=gems/Filter",
        "projectName" : "git_parent_test_mig"
      }
    }
  },
  "ports" : {
    "inputs" : [ ],
    "outputs" : [ ],
    "selectedInputFields" : [ ],
    "isCustomOutputSchema" : false,
    "autoUpdateOnRun" : false
  }
}