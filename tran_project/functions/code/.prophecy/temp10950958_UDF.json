{"initCode":"import java.text.SimpleDateFormat\ndef f_forward_for_next_stage(agg_type: Int, payment_type: Int) = {\n  var l_payment_type = convertToInt(if (payment_type == null) {\n 0\n} else {\n payment_type\n})\nvar l_forward_for_next_stage = 0\nl_forward_for_next_stage = convertToInt(if ((if (agg_type == null) {\n 0\n} else {\n agg_type\n}) == 1) {\n if (l_payment_type == 2) {\n 1\n} else {\n 0\n}\n} else {\n if ((if (agg_type == null) {\n 0\n} else {\n agg_type\n}) == 3) {\n 0\n} else {\n if ((if (agg_type == null) {\n 0\n} else {\n agg_type\n}) == 5) {\n 0\n} else {\n 1\n}\n}\n})\nl_forward_for_next_stage\n}\ndef f_is_matching_payment_and_agg_type(agg_type: Int, payment_type: Int) = {\n  var l_agg_type = convertToInt(if (agg_type == null) {\n 0\n} else {\n agg_type\n})\nvar l_payment_type = convertToInt(if (payment_type == null) {\n 0\n} else {\n payment_type\n})\nvar l_is_matching_payment_and_agg_type = 0\nl_is_matching_payment_and_agg_type = convertToInt(if (((if (agg_type == null) {\n 0\n} else {\n agg_type\n}) != 1) && ((if (agg_type == null) {\n 0\n} else {\n agg_type\n}) != 2)) {\n if (l_agg_type == 3) {\n if (l_payment_type == 2) {\n 1\n} else {\n l_is_matching_payment_and_agg_type\n}\n} else {\n if (l_agg_type == 4) {\n if (l_payment_type == 5) {\n 1\n} else {\n l_is_matching_payment_and_agg_type\n}\n} else {\n l_is_matching_payment_and_agg_type\n}\n}\n} else {\n if ((if (payment_type == null) {\n 0\n} else {\n payment_type\n}) == 1) {\n 1\n} else {\n l_is_matching_payment_and_agg_type\n}\n})\nl_is_matching_payment_and_agg_type\n}\ndef f_payment_type_matches(agg_type: Int, payment_type: Int) = {\n  var l_payment_type_matches = 0\nl_payment_type_matches = convertToInt(if (((f_is_matching_payment_and_agg_type(if (agg_type == null) {\n 0\n} else {\n agg_type\n}, if (payment_type == null) {\n 0\n} else {\n payment_type\n}) == 1) || (((if (agg_type == null) {\n 0\n} else {\n agg_type\n}) == 5) && ((if (payment_type == null) {\n 0\n} else {\n payment_type\n}) == 6))) || (((if (agg_type == null) {\n 0\n} else {\n agg_type\n}) == 0) && (((((if (payment_type == null) {\n 0\n} else {\n payment_type\n}) != 1) && ((if (payment_type == null) {\n 0\n} else {\n payment_type\n}) != 2)) && ((if (payment_type == null) {\n 0\n} else {\n payment_type\n}) != 5)) && ((if (payment_type == null) {\n 0\n} else {\n payment_type\n}) != 6)))) {\n 1\n} else {\n l_payment_type_matches\n})\nl_payment_type_matches\n}\ndef f_keep_data_charge(cost_pct: Double, agg_type: Int, payment_type: Int) = {\n  var l_agg_type = convertToInt(if (agg_type == null) {\n 0\n} else {\n agg_type\n})\nvar l_payment_type = convertToInt(if (payment_type == null) {\n 0\n} else {\n payment_type\n})\nvar l_keep_data_charge = 0\nl_keep_data_charge = convertToInt(if ((if (cost_pct == null) {\n 0\n} else {\n cost_pct\n}) > 0) {\n if ((f_payment_type_matches(l_agg_type, l_payment_type) == 1) || (f_forward_for_next_stage(l_agg_type, l_payment_type) == 1)) {\n 1\n} else {\n l_keep_data_charge\n}\n} else {\n if (((if (agg_type == null) {\n 0\n} else {\n agg_type\n}) == 0) || ((if (agg_type == null) {\n 0\n} else {\n agg_type\n}) == 4)) {\n 1\n} else {\n l_keep_data_charge\n}\n})\nl_keep_data_charge\n}","code":"udf(\n    (\n      _l_data_costs:                Seq[Row],\n      _l_payment_type:              Integer,\n      _l_member_sales_tax_rate_pct: Double,\n      _i:                           Integer,\n      _l_media_cost_cpm:            Double,\n      _l_agg_type:                  Integer,\n      _l_data_cost:                 Row,\n      _data_costs:                  Seq[Row]\n    ) => {\n      var l_data_costs                = _l_data_costs.toArray\n      var l_payment_type              = _l_payment_type\n      var l_member_sales_tax_rate_pct = _l_member_sales_tax_rate_pct\n      var i                           = _i\n      var l_media_cost_cpm            = _l_media_cost_cpm\n      var l_agg_type                  = _l_agg_type\n      var l_data_cost                 = _l_data_cost\n      var data_costs                  = _data_costs.toArray\n\n      while (compareTo(i, data_costs.length) < 0) {\n        l_data_cost = data_costs(convertToInt(i))\n        if (\n          (!_isnull(\n            data_costs(convertToInt(i)).getAs[Double](\"cost\")\n          )) && (!_isnull(\n            data_costs(convertToInt(i)).getAs[Double](\"cost_pct\")\n          ))\n        ) {\n          if (\n            f_keep_data_charge(\n              data_costs(convertToInt(i)).getAs[Double](\"cost_pct\"),\n              l_agg_type,\n              l_payment_type\n            ) == 1\n          ) {\n            if (\n              (compareTo(data_costs(convertToInt(i)).getAs[Double](\"cost_pct\"),\n                         0\n              ) > 0) && (f_payment_type_matches(l_agg_type,\n                                                l_payment_type\n              ) == 1)\n            )\n              l_data_cost = updateIndexInRow(\n                l_data_cost,\n                1,\n                (l_media_cost_cpm * (l_data_cost.getAs[Double](\n                  \"cost_pct\"\n                ) / 100.0)) * (1.0 + (l_member_sales_tax_rate_pct / 100.0))\n              )\n            if (l_agg_type == 0)\n              l_data_cost = updateIndexInRow(\n                l_data_cost,\n                1,\n                l_data_cost.getAs[Double](\n                  \"cost\"\n                ) * (1.0 + (l_member_sales_tax_rate_pct / 100.0))\n              )\n            l_data_costs =\n              Array.concat(l_data_costs, Array.fill(1)(l_data_cost))\n          }\n        }\n        i = i + convertToInt(1)\n      }\n\n      Row(\n        l_data_costs.map { x =>\n          if (!_isnull(x))\n            Row(convertToInt(x.getAs[Integer](0)),\n                x.getAs[Double](1),\n                x.getAs[Seq[Integer]](2).toArray,\n                x.getAs[Double](3)\n            )\n          else\n            null\n        }.toArray,\n        convertToInt(i),\n        if (!_isnull(l_data_cost))\n          Row(convertToInt(l_data_cost.getAs[Integer](0)),\n              l_data_cost.getAs[Double](1),\n              l_data_cost.getAs[Seq[Integer]](2).toArray,\n              l_data_cost.getAs[Double](3)\n          )\n        else\n          null\n      )\n    },\n    StructType(\n      List(\n        StructField(\n          \"l_data_costs\",\n          ArrayType(\n            StructType(\n              List(\n                StructField(\"data_member_id\", IntegerType,            true),\n                StructField(\"cost\",           DoubleType,             true),\n                StructField(\"used_segments\",  ArrayType(IntegerType), false),\n                StructField(\"cost_pct\",       DoubleType,             true)\n              )\n            )\n          ),\n          false\n        ),\n        StructField(\"i\", IntegerType, false),\n        StructField(\n          \"l_data_cost\",\n          StructType(\n            List(\n              StructField(\"data_member_id\", IntegerType,            true),\n              StructField(\"cost\",           DoubleType,             true),\n              StructField(\"used_segments\",  ArrayType(IntegerType), false),\n              StructField(\"cost_pct\",       DoubleType,             true)\n            )\n          ),\n          false\n        )\n      )\n    )\n  )"}