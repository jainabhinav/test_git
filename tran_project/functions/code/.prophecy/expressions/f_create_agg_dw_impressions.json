{"parameters":[{"name":"sup_ip_range_lookup_count","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"sup_common_deal_lookup_2","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"sup_common_deal_lookup","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"sup_bidder_campaign_lookup","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"_f_view_detection_enabled","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"f_transaction_event_type_id_87067","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"_f_find_personal_identifier","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"_f_viewdef_definition_id","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"_f_is_buy_side","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"_f_has_transacted","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"f_transaction_event_87047","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"f_transaction_event_87057","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"f_preempt_over_impression_95337","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"f_transaction_event_type_id_87077","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"f_preempt_over_impression_94298","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"f_preempt_over_impression_88439","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"f_preempt_over_impression_88639","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"_f_is_default_or_error_imp","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"_f_is_error_imp","type":"column","metadata":{"description":"","tags":[],"mappings":[]}},{"name":"should_process_views","type":"column","metadata":{"description":"","tags":[],"mappings":[]}}],"output":{"type":"struct","fields":[{"name":"curator_member_id_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"discrepancy_allowance_var","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"should_process_views_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"buyer_member_id_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"imps_for_budget_caps_pacing_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"imp_type_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_curated_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"view_detection_enabled_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"buyer_trx_event_type_id_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"commission_revshare_var","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"creative_overage_fees_var","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"viewdef_definition_id_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"has_buyer_transacted_var","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"payment_type_normalized_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"seller_trx_event_id_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"seller_revenue_cpm_var","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"insertion_order_id_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"revenue_type_normalized_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"billing_period_id_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"viewdef_viewable_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"split_id_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"data_costs_deal_var","type":{"type":"array","elementType":{"type":"struct","fields":[{"name":"data_member_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"cost","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"used_segments","type":{"type":"array","elementType":"integer","containsNull":true},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"cost_pct","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"containsNull":true},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"seller_charges_pricing_terms_var","type":{"type":"array","elementType":{"type":"struct","fields":[{"name":"term_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"amount","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"rate","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_deduction","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_media_cost_dependent","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"data_member_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"containsNull":true},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"f_preempt_over_impression_94298_var","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"commission_cpm_var","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"v_transaction_event_pricing_var","type":{"type":"struct","fields":[{"name":"gross_payment_value_microcents","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"net_payment_value_microcents","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"seller_revenue_microcents","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"buyer_charges","type":{"type":"struct","fields":[{"name":"rate_card_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"member_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_dw","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"pricing_terms","type":{"type":"array","elementType":{"type":"struct","fields":[{"name":"term_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"amount","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"rate","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_deduction","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_media_cost_dependent","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"data_member_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"containsNull":true},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"fx_margin_rate_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"marketplace_owner_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"virtual_marketplace_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"amino_enabled","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"seller_charges","type":{"type":"struct","fields":[{"name":"rate_card_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"member_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_dw","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"pricing_terms","type":{"type":"array","elementType":{"type":"struct","fields":[{"name":"term_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"amount","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"rate","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_deduction","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_media_cost_dependent","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"data_member_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"containsNull":true},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"fx_margin_rate_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"marketplace_owner_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"virtual_marketplace_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"amino_enabled","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"buyer_transacted","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"seller_transacted","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"buyer_trx_event_id_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"campaign_group_id_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"has_seller_transacted_var","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"buyer_charges_pricing_terms_var","type":{"type":"struct","fields":[{"name":"term_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"amount","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"rate","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_deduction","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_media_cost_dependent","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"data_member_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"revenue_value_var","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"netflix_ppid_var","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"campaign_group_type_id_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"should_zero_seller_revenue_var","type":"boolean","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"view_measurable_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"advertiser_id_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"media_cost_dollars_cpm_var","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"creative_id_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"f_preempt_over_impression_95337_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"flight_id_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"viewable_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"auction_service_deduction_var","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"media_buy_cost2_var","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"seller_deduction_var","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"buyer_spend_cpm_var","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"seller_trx_event_type_id_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"auction_service_fees_var","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"serving_fees_cpm_var","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"data_costs_var","type":{"type":"array","elementType":{"type":"struct","fields":[{"name":"data_member_id","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"cost","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"used_segments","type":{"type":"array","elementType":"integer","containsNull":true},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"cost_pct","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"containsNull":true},"nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"sup_ip_range_lookup_count_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"ttl_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"view_result_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_dw_normalized_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"booked_revenue_adv_curr_var","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"booked_revenue_dollars_var","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"deal_id_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"_f_is_buy_side_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"deal_type_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"campaign_id_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"is_placeholder_bid_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"serving_fees_revshare_var","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"view_non_measurable_reason_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"_f_is_default_or_error_imp_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"_f_is_error_imp_var","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"virtual_log_dw_bid_creative_freq","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"virtual_log_dw_bid_creative_rec","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"virtual_log_dw_bid_advertiser_freq","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"virtual_log_dw_bid_advertiser_rec","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"virtual_log_dw_bid_log_type","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"virtual_log_dw_bid_pricing_type","type":"string","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"virtual_log_dw_bid_is_control","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"virtual_log_dw_bid_cadence_modifier","type":"double","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"virtual_log_dw_bid_predict_type","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"virtual_log_dw_bid_predict_type_goal","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"virtual_log_dw_bid_campaign_group_freq","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"virtual_log_dw_bid_campaign_group_rec","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"virtual_log_dw_bid_insertion_order_freq","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"virtual_log_dw_bid_insertion_order_rec","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"virtual_log_dw_bid_custom_model_output_code","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}},{"name":"virtual_log_dw_bid_revenue_auction_event_type","type":"integer","nullable":true,"metadata":{"description":"","mappings":[],"tags":[]}}]},"isCustomSchemaEnabled":true,"code":"    var imp_type: org.apache.spark.sql.Column = lit(1)\n    var is_dw_normalized: org.apache.spark.sql.Column = lit(0)\n    var buyer_member_id: org.apache.spark.sql.Column = lit(0)\n    var campaign: org.apache.spark.sql.Column = lit(null).cast(\n      StructType(\n        List(\n          StructField(\"campaign_id\", IntegerType, true),\n          StructField(\"campaign_type_id\", IntegerType, true),\n          StructField(\"campaign_group_id\", IntegerType, true),\n          StructField(\"campaign_group_type_id\", IntegerType, true)\n        )\n      )\n    )\n    var split_id_init: org.apache.spark.sql.Column =\n      coalesce(col(\"log_dw_bid.split_id\").cast(IntegerType), lit(0))\n        .cast(IntegerType)\n    var seller_trx_event_id: org.apache.spark.sql.Column = lit(0)\n    var buyer_trx_event_id: org.apache.spark.sql.Column = lit(0)\n    var seller_trx_event_type_id: org.apache.spark.sql.Column = lit(0)\n    var buyer_trx_event_type_id: org.apache.spark.sql.Column = lit(0)\n    var payment_type_normalized: org.apache.spark.sql.Column = lit(999)\n    var revenue_type_normalized: org.apache.spark.sql.Column = lit(999)\n    var has_seller_transacted: org.apache.spark.sql.Column =\n      lit(0).cast(BooleanType)\n    var has_buyer_transacted: org.apache.spark.sql.Column =\n      lit(0).cast(BooleanType)\n    var view_detection_enabled: org.apache.spark.sql.Column = lit(0)\n    var view_measurable: org.apache.spark.sql.Column = lit(0)\n    var viewable: org.apache.spark.sql.Column = lit(0)\n    var view_non_measurable_reason: org.apache.spark.sql.Column = lit(0)\n    var viewdef_definition_id: org.apache.spark.sql.Column = lit(0)\n    var viewdef_viewable: org.apache.spark.sql.Column = lit(0)\n    var view_result: org.apache.spark.sql.Column = lit(0)\n    var is_curated: org.apache.spark.sql.Column = lit(0)\n    var curator_member_id: org.apache.spark.sql.Column =\n      lit(null).cast(IntegerType)\n    var member_id_by_deal_id: org.apache.spark.sql.Column = lit(null).cast(\n      StructType(\n        List(StructField(\"id\", IntegerType, true),\n          StructField(\"member_id\", IntegerType, true),\n          StructField(\"deal_type_id\", IntegerType, true)\n        )\n      )\n    )\n    var deal_id: org.apache.spark.sql.Column = lit(0)\n    var deal_type: org.apache.spark.sql.Column = lit(null).cast(IntegerType)\n    var ttl: org.apache.spark.sql.Column = lit(0)\n    var imps_for_budget_caps_pacing: org.apache.spark.sql.Column = lit(0)\n    var is_budget_table_imp_type: org.apache.spark.sql.Column = lit(0)\n    var is_not_roadblock_secondary: org.apache.spark.sql.Column = lit(0)\n    var is_external_imp_type: org.apache.spark.sql.Column = lit(0)\n    var is_not_video_imp: org.apache.spark.sql.Column = lit(0)\n    var creative_id: org.apache.spark.sql.Column = lit(null).cast(IntegerType)\n    var advertiser_id: org.apache.spark.sql.Column = lit(null).cast(IntegerType)\n    var campaign_group_id: org.apache.spark.sql.Column =\n      lit(null).cast(IntegerType)\n    var insertion_order_id: org.apache.spark.sql.Column =\n      lit(null).cast(IntegerType)\n    var campaign_id: org.apache.spark.sql.Column = lit(null).cast(IntegerType)\n    var campaign_group_type_id: org.apache.spark.sql.Column = lit(0)\n    var is_placeholder_bid: org.apache.spark.sql.Column = lit(0)\n    var flight_id: org.apache.spark.sql.Column = lit(null).cast(IntegerType)\n    var billing_period_id: org.apache.spark.sql.Column =\n      lit(null).cast(IntegerType)\n    var should_zero_seller_revenue: org.apache.spark.sql.Column =\n      lit(0).cast(BooleanType)\n    var netflix_ppid: org.apache.spark.sql.Column = lit(null).cast(StringType)\n    var v_transaction_event_pricing: org.apache.spark.sql.Column =\n      lit(null).cast(\n        StructType(\n          List(\n            StructField(\"gross_payment_value_microcents\", LongType, true),\n            StructField(\"net_payment_value_microcents\", LongType, true),\n            StructField(\"seller_revenue_microcents\", LongType, true),\n            StructField(\n              \"buyer_charges\",\n              StructType(\n                List(\n                  StructField(\"rate_card_id\", IntegerType, true),\n                  StructField(\"member_id\", IntegerType, true),\n                  StructField(\"is_dw\", BooleanType, true),\n                  StructField(\n                    \"pricing_terms\",\n                    ArrayType(\n                      StructType(\n                        List(\n                          StructField(\"term_id\", IntegerType, true),\n                          StructField(\"amount\", DoubleType, true),\n                          StructField(\"rate\", DoubleType, true),\n                          StructField(\"is_deduction\", BooleanType, true),\n                          StructField(\"is_media_cost_dependent\",\n                            BooleanType,\n                            true\n                          ),\n                          StructField(\"data_member_id\", IntegerType, true)\n                        )\n                      ),\n                      true\n                    ),\n                    true\n                  ),\n                  StructField(\"fx_margin_rate_id\", IntegerType, true),\n                  StructField(\"marketplace_owner_id\", IntegerType, true),\n                  StructField(\"virtual_marketplace_id\", IntegerType, true),\n                  StructField(\"amino_enabled\", BooleanType, true)\n                )\n              ),\n              true\n            ),\n            StructField(\n              \"seller_charges\",\n              StructType(\n                List(\n                  StructField(\"rate_card_id\", IntegerType, true),\n                  StructField(\"member_id\", IntegerType, true),\n                  StructField(\"is_dw\", BooleanType, true),\n                  StructField(\n                    \"pricing_terms\",\n                    ArrayType(\n                      StructType(\n                        List(\n                          StructField(\"term_id\", IntegerType, true),\n                          StructField(\"amount\", DoubleType, true),\n                          StructField(\"rate\", DoubleType, true),\n                          StructField(\"is_deduction\", BooleanType, true),\n                          StructField(\"is_media_cost_dependent\",\n                            BooleanType,\n                            true\n                          ),\n                          StructField(\"data_member_id\", IntegerType, true)\n                        )\n                      ),\n                      true\n                    ),\n                    true\n                  ),\n                  StructField(\"fx_margin_rate_id\", IntegerType, true),\n                  StructField(\"marketplace_owner_id\", IntegerType, true),\n                  StructField(\"virtual_marketplace_id\", IntegerType, true),\n                  StructField(\"amino_enabled\", BooleanType, true)\n                )\n              ),\n              true\n            ),\n            StructField(\"buyer_transacted\", BooleanType, true),\n            StructField(\"seller_transacted\", BooleanType, true)\n          )\n        )\n      )\n    var buyer_charges_pricing_terms_init: org.apache.spark.sql.Column =\n      lit(null).cast(\n        ArrayType(\n          StructType(\n            List(\n              StructField(\"term_id\", IntegerType, true),\n              StructField(\"amount\", DoubleType, true),\n              StructField(\"rate\", DoubleType, true),\n              StructField(\"is_deduction\", BooleanType, true),\n              StructField(\"is_media_cost_dependent\", BooleanType, true),\n              StructField(\"data_member_id\", IntegerType, true)\n            )\n          ),\n          true\n        )\n      )\n    var seller_charges_pricing_terms_init: org.apache.spark.sql.Column =\n      lit(null).cast(\n        ArrayType(\n          StructType(\n            List(\n              StructField(\"term_id\", IntegerType, true),\n              StructField(\"amount\", DoubleType, true),\n              StructField(\"rate\", DoubleType, true),\n              StructField(\"is_deduction\", BooleanType, true),\n              StructField(\"is_media_cost_dependent\", BooleanType, true),\n              StructField(\"data_member_id\", IntegerType, true)\n            )\n          ),\n          true\n        )\n      )\n    var v_pricing_term: org.apache.spark.sql.Column = lit(null).cast(\n      StructType(\n        List(\n          StructField(\"term_id\", IntegerType, true),\n          StructField(\"amount\", DoubleType, true),\n          StructField(\"rate\", DoubleType, true),\n          StructField(\"is_deduction\", BooleanType, true),\n          StructField(\"is_media_cost_dependent\", BooleanType, true),\n          StructField(\"data_member_id\", IntegerType, true)\n        )\n      )\n    )\n    var auction_service_deduction: org.apache.spark.sql.Column = lit(0)\n    var auction_service_fees: org.apache.spark.sql.Column = lit(0)\n    var discrepancy_allowance: org.apache.spark.sql.Column = lit(0)\n    var creative_overage_fees: org.apache.spark.sql.Column = lit(0)\n    var buyer_spend_cpm: org.apache.spark.sql.Column = lit(0)\n    var buyer_spend_microcents: org.apache.spark.sql.Column = lit(0)\n    var seller_revenue_cpm: org.apache.spark.sql.Column = lit(0)\n    var seller_revenue_microcents: org.apache.spark.sql.Column = lit(0)\n    var seller_deduction_term_id_1: org.apache.spark.sql.Column = lit(0)\n    var seller_deduction_term_id_74: org.apache.spark.sql.Column = lit(0)\n    var seller_deduction: org.apache.spark.sql.Column = lit(0)\n    var commission_cpm: org.apache.spark.sql.Column = lit(0)\n    var commission_revshare: org.apache.spark.sql.Column = lit(0)\n    var serving_fees_cpm: org.apache.spark.sql.Column = lit(0)\n    var serving_fees_revshare: org.apache.spark.sql.Column = lit(0)\n    var booked_revenue_dollars: org.apache.spark.sql.Column = lit(0)\n    var media_buy_rev_share_pct: org.apache.spark.sql.Column = lit(0)\n    var media_buy_cost: org.apache.spark.sql.Column = lit(0)\n    var booked_revenue_adv_curr: org.apache.spark.sql.Column = lit(0)\n    var media_cost_dollars_cpm: org.apache.spark.sql.Column = lit(0)\n    var member_sales_tax_rate_pct: org.apache.spark.sql.Column = lit(0)\n    var revenue_value_init: org.apache.spark.sql.Column =\n      coalesce(col(\"log_dw_bid.revenue_value_dollars\"), lit(0)).cast(DoubleType)\n    var data_costs_init: org.apache.spark.sql.Column = lit(null).cast(\n      ArrayType(\n        StructType(\n          List(\n            StructField(\"data_member_id\", IntegerType, true),\n            StructField(\"cost\", DoubleType, true),\n            StructField(\"used_segments\", ArrayType(IntegerType, true), true),\n            StructField(\"cost_pct\", DoubleType, true)\n          )\n        ),\n        true\n      )\n    )\n    var virtual_log_dw_bid: org.apache.spark.sql.Column = struct(\n      lit(0L).cast(LongType).as(\"date_time\"),\n      lit(0L).cast(LongType).as(\"auction_id_64\"),\n      lit(null).as(\"price\"),\n      lit(null).as(\"member_id\"),\n      lit(null).as(\"advertiser_id\"),\n      lit(null).as(\"campaign_group_id\"),\n      lit(null).as(\"campaign_id\"),\n      lit(null).as(\"creative_id\"),\n      lit(null).as(\"creative_freq\"),\n      lit(null).as(\"creative_rec\"),\n      lit(null).as(\"advertiser_freq\"),\n      lit(null).as(\"advertiser_rec\"),\n      lit(null).as(\"is_remarketing\"),\n      lit(null).as(\"user_group_id\"),\n      lit(null).as(\"media_buy_cost\"),\n      lit(null).as(\"is_default\"),\n      lit(null).as(\"pub_rule_id\"),\n      lit(null).as(\"media_buy_rev_share_pct\"),\n      lit(null).as(\"pricing_type\"),\n      lit(null).as(\"can_convert\"),\n      lit(null).as(\"is_control\"),\n      lit(null).as(\"control_pct\"),\n      lit(null).as(\"control_creative_id\"),\n      lit(null).as(\"cadence_modifier\"),\n      lit(null).as(\"advertiser_currency\"),\n      lit(null).as(\"advertiser_exchange_rate\"),\n      lit(null).as(\"insertion_order_id\"),\n      lit(null).as(\"predict_type\"),\n      lit(null).as(\"predict_type_goal\"),\n      lit(null).as(\"revenue_value_dollars\"),\n      lit(null).as(\"revenue_value_adv_curr\"),\n      lit(null).as(\"commission_cpm\"),\n      lit(null).as(\"commission_revshare\"),\n      lit(null).as(\"serving_fees_cpm\"),\n      lit(null).as(\"serving_fees_revshare\"),\n      lit(null).as(\"publisher_currency\"),\n      lit(null).as(\"publisher_exchange_rate\"),\n      lit(null).as(\"payment_type\"),\n      lit(null).as(\"payment_value\"),\n      lit(null).as(\"creative_group_freq\"),\n      lit(null).as(\"creative_group_rec\"),\n      lit(null).as(\"revenue_type\"),\n      lit(null).as(\"apply_cost_on_default\"),\n      lit(null).as(\"instance_id\"),\n      lit(null).as(\"vp_expose_age\"),\n      lit(null).as(\"vp_expose_gender\"),\n      lit(null).as(\"targeted_segments\"),\n      lit(null).as(\"ttl\"),\n      lit(0L).cast(LongType).as(\"auction_timestamp\"),\n      array()\n        .cast(\n          ArrayType(\n            StructType(\n              List(\n                StructField(\"data_member_id\", IntegerType, true),\n                StructField(\"cost\", DoubleType, true),\n                StructField(\"used_segments\",\n                  ArrayType(IntegerType, true),\n                  true\n                ),\n                StructField(\"cost_pct\", DoubleType, true)\n              )\n            ),\n            true\n          )\n        )\n        .as(\"data_costs\"),\n      array().cast(ArrayType(IntegerType, true)).as(\"targeted_segment_list\"),\n      lit(null).as(\"campaign_group_freq\"),\n      lit(null).as(\"campaign_group_rec\"),\n      lit(null).as(\"insertion_order_freq\"),\n      lit(null).as(\"insertion_order_rec\"),\n      lit(null).as(\"buyer_gender\"),\n      lit(null).as(\"buyer_age\"),\n      lit(null).as(\"custom_model_id\"),\n      lit(null).as(\"custom_model_last_modified\"),\n      lit(null).as(\"custom_model_output_code\"),\n      lit(null).as(\"bid_priority\"),\n      lit(null).as(\"explore_disposition\"),\n      lit(null).as(\"revenue_auction_event_type\"),\n      array()\n        .cast(\n          ArrayType(\n            StructType(\n              List(\n                StructField(\"model_type\", IntegerType, true),\n                StructField(\"model_id\", IntegerType, true),\n                StructField(\"leaf_code\", StringType, true),\n                StructField(\"origin\", IntegerType, true),\n                StructField(\"experiment\", IntegerType, true),\n                StructField(\"value\", FloatType, true)\n              )\n            ),\n            true\n          )\n        )\n        .as(\"campaign_group_models\"),\n      lit(null).as(\"impression_transaction_type\"),\n      lit(null).as(\"is_deferred\"),\n      lit(null).as(\"log_type\"),\n      lit(null).as(\"crossdevice_group_anon\"),\n      lit(null).as(\"fx_rate_snapshot_id\"),\n      lit(null).as(\"crossdevice_graph_cost\"),\n      lit(null).as(\"revenue_event_type_id\"),\n      array()\n        .cast(\n          ArrayType(StructType(\n            List(StructField(\"segment_id\", IntegerType, true),\n              StructField(\"last_seen_min\", IntegerType, true)\n            )\n          ),\n            true\n          )\n        )\n        .as(\"targeted_segment_details\"),\n      lit(null).as(\"insertion_order_budget_interval_id\"),\n      lit(null).as(\"campaign_group_budget_interval_id\"),\n      lit(null).as(\"cold_start_price_type\"),\n      lit(null).as(\"discovery_state\"),\n      lit(null).as(\"revenue_info\"),\n      lit(null).as(\"use_revenue_info\"),\n      lit(null).as(\"sales_tax_rate_pct\"),\n      lit(null).as(\"targeted_crossdevice_graph_id\"),\n      lit(null).as(\"product_feed_id\"),\n      lit(null).as(\"item_selection_strategy_id\"),\n      lit(null).as(\"discovery_prediction\"),\n      lit(null).as(\"bidding_host_id\"),\n      lit(null).as(\"split_id\"),\n      array()\n        .cast(\n          ArrayType(\n            StructType(List(StructField(\"segment_id\", IntegerType, true))),\n            true\n          )\n        )\n        .as(\"excluded_targeted_segment_details\"),\n      lit(null).as(\"predicted_kpi_event_rate\"),\n      lit(null).as(\"has_crossdevice_reach_extension\"),\n      lit(null).as(\"advertiser_expected_value_ecpm_ac\"),\n      lit(null).as(\"bpp_multiplier\"),\n      lit(null).as(\"bpp_offset\"),\n      lit(null).as(\"bid_modifier\"),\n      lit(null).as(\"payment_value_microcents\"),\n      array()\n        .cast(\n          ArrayType(StructType(\n            List(StructField(\"graph_id\", IntegerType, true),\n              StructField(\"group_id\", BinaryType, true)\n            )\n          ),\n            true\n          )\n        )\n        .as(\"crossdevice_graph_membership\"),\n      array()\n        .cast(\n          ArrayType(\n            StructType(\n              List(\n                StructField(\"kpi_event_id\", IntegerType, true),\n                StructField(\"ev_kpi_event_ac\", DoubleType, true),\n                StructField(\"p_kpi_event\", DoubleType, true),\n                StructField(\"bpo_aggressiveness_factor\", DoubleType, true),\n                StructField(\"min_margin_pct\", DoubleType, true),\n                StructField(\"max_revenue_or_bid_value\", DoubleType, true),\n                StructField(\"min_revenue_or_bid_value\", DoubleType, true),\n                StructField(\"cold_start_price_ac\", DoubleType, true),\n                StructField(\"dynamic_bid_max_revenue_ac\", DoubleType, true),\n                StructField(\"p_revenue_event\", DoubleType, true),\n                StructField(\"total_fees_deducted_ac\", DoubleType, true)\n              )\n            ),\n            true\n          )\n        )\n        .as(\"valuation_landscape\"),\n      lit(null).as(\"line_item_currency\"),\n      lit(null).as(\"measurement_fee_cpm_usd\"),\n      lit(null).as(\"measurement_provider_id\"),\n      lit(null).as(\"measurement_provider_member_id\"),\n      lit(null).as(\"offline_attribution_provider_member_id\"),\n      lit(null).as(\"offline_attribution_cost_usd_cpm\"),\n      array()\n        .cast(\n          ArrayType(\n            StructType(\n              List(\n                StructField(\"identity_type\", IntegerType, true),\n                StructField(\n                  \"targeted_segment_details\",\n                  ArrayType(\n                    StructType(\n                      List(StructField(\"segment_id\", IntegerType, true),\n                        StructField(\"last_seen_min\", IntegerType, true)\n                      )\n                    ),\n                    true\n                  ),\n                  true\n                )\n              )\n            ),\n            true\n          )\n        )\n        .as(\"targeted_segment_details_by_id_type\"),\n      array()\n        .cast(\n          ArrayType(StructType(\n            List(StructField(\"provider_member_id\", IntegerType, true),\n              StructField(\"cost_usd_cpm\", DoubleType, true)\n            )\n          ),\n            true\n          )\n        )\n        .as(\"offline_attribution\"),\n      lit(null).as(\"frequency_cap_type_internal\"),\n      lit(null).as(\"modeled_cap_did_override_line_item_daily_cap\"),\n      lit(null).as(\"modeled_cap_user_sample_rate\"),\n      lit(null).as(\"bid_rate\"),\n      array()\n        .cast(ArrayType(IntegerType, true))\n        .as(\"district_postal_code_lists\"),\n      lit(null).as(\"pre_bpp_price\"),\n      lit(null).as(\"feature_tests_bitmap\")\n    )\n    var data_costs_deal_init: org.apache.spark.sql.Column = lit(null).cast(\n      ArrayType(\n        StructType(\n          List(\n            StructField(\"data_member_id\", IntegerType, true),\n            StructField(\"cost\", DoubleType, true),\n            StructField(\"used_segments\", ArrayType(IntegerType, true), true),\n            StructField(\"cost_pct\", DoubleType, true)\n          )\n        ),\n        true\n      )\n    )\n    var l_seller_deal_member_id: org.apache.spark.sql.Column =\n      lit(null).cast(IntegerType)\n    imp_type =\n      when(is_not_null(col(\"imp_type\").cast(IntegerType)).cast(BooleanType),\n        col(\"imp_type\").cast(IntegerType)\n      ).otherwise(imp_type).cast(IntegerType)\n    ttl = coalesce(col(\"log_impbus_impressions.ttl\").cast(IntegerType), lit(0))\n      .cast(IntegerType)\n    buyer_member_id = f_preempt_over_impression_non_zero_explicit(\n      is_not_null(col(\"log_impbus_preempt.buyer_member_id\").cast(IntegerType)),\n      col(\"log_impbus_impressions.buyer_member_id\").cast(IntegerType),\n      col(\"log_impbus_preempt.buyer_member_id\").cast(IntegerType)\n    ).cast(IntegerType)\n    is_dw_normalized = when(\n      is_not_null(col(\"log_impbus_impressions_pricing.seller_charges.is_dw\"))\n        .and(\n          col(\"log_impbus_impressions_pricing.seller_charges.is_dw\") === lit(1)\n        )\n        .and(\n          is_not_null(col(\"log_impbus_impressions_pricing.buyer_charges.is_dw\"))\n        )\n        .and(\n          col(\"log_impbus_impressions_pricing.buyer_charges.is_dw\") === lit(1)\n        )\n        .and(!imp_type.isin(1, 2, 3, 8, 5, 9))\n        .and(is_not_null(col(\"seller_member_id\").cast(IntegerType)))\n        .and(col(\"seller_member_id\").cast(IntegerType) =!= lit(0))\n        .and(\n          is_not_null(\n            f_preempt_over_impression_non_zero_explicit(\n              is_not_null(\n                col(\"log_impbus_preempt.buyer_member_id\").cast(IntegerType)\n              ),\n              col(\"log_impbus_impressions.buyer_member_id\").cast(IntegerType),\n              col(\"log_impbus_preempt.buyer_member_id\").cast(IntegerType)\n            )\n          )\n        )\n        .and(\n          f_preempt_over_impression_non_zero_explicit(\n            is_not_null(\n              col(\"log_impbus_preempt.buyer_member_id\").cast(IntegerType)\n            ),\n            col(\"log_impbus_impressions.buyer_member_id\").cast(IntegerType),\n            col(\"log_impbus_preempt.buyer_member_id\").cast(IntegerType)\n          ) =!= lit(0)\n        )\n        .and(\n          col(\"seller_member_id\")\n            .cast(IntegerType) =!= f_preempt_over_impression_non_zero_explicit(\n            is_not_null(\n              col(\"log_impbus_preempt.buyer_member_id\").cast(IntegerType)\n            ),\n            col(\"log_impbus_impressions.buyer_member_id\").cast(IntegerType),\n            col(\"log_impbus_preempt.buyer_member_id\").cast(IntegerType)\n          )\n        ),\n      lit(1)\n    ).otherwise(lit(0)).cast(IntegerType)\n    campaign_group_type_id = when(\n      is_not_null(col(\"campaign_id\").cast(IntegerType))\n        .and(col(\"campaign_id\").cast(IntegerType) =!= lit(0))\n        .and(\n          is_not_null(sup_bidder_campaign_lookup).and(\n            is_not_null(\n              sup_bidder_campaign_lookup.getField(\"campaign_group_type_id\")\n            )\n          )\n        )\n        .and(_f_is_buy_side === lit(1)),\n      sup_bidder_campaign_lookup.getField(\"campaign_group_type_id\")\n    ).otherwise(lit(0)).cast(IntegerType)\n    seller_trx_event_id = f_transaction_event_87047.cast(IntegerType)\n    buyer_trx_event_id = f_transaction_event_87057.cast(IntegerType)\n    seller_trx_event_type_id =\n      f_transaction_event_type_id_87067.cast(IntegerType)\n    buyer_trx_event_type_id =\n      f_transaction_event_type_id_87077.cast(IntegerType)\n    v_transaction_event_pricing = f_get_transaction_event_pricing(\n      col(\"log_impbus_impressions_pricing.impression_event_pricing\"),\n      col(\"log_impbus_auction_event.auction_event_pricing\"),\n      col(\"log_impbus_impressions_pricing.buyer_charges\"),\n      col(\"log_impbus_impressions_pricing.seller_charges\"),\n      should_process_views\n    )\n    val _buyer_charges_pricing_terms = when(\n      is_not_null(\n        f_get_transaction_event_pricing(\n          col(\"log_impbus_impressions_pricing.impression_event_pricing\"),\n          col(\"log_impbus_auction_event.auction_event_pricing\"),\n          col(\"log_impbus_impressions_pricing.buyer_charges\"),\n          col(\"log_impbus_impressions_pricing.seller_charges\"),\n          f_should_process_views(col(\"log_dw_view\"),\n            f_transaction_event_87047,\n            f_transaction_event_87057\n          )\n        ).getField(\"buyer_charges\").getField(\"pricing_terms\")\n      ).cast(BooleanType),\n      v_transaction_event_pricing\n        .getField(\"buyer_charges\")\n        .getField(\"pricing_terms\")\n    ).otherwise(buyer_charges_pricing_terms_init)\n    val _seller_charges_pricing_terms = when(\n      is_not_null(\n        f_get_transaction_event_pricing(\n          col(\"log_impbus_impressions_pricing.impression_event_pricing\"),\n          col(\"log_impbus_auction_event.auction_event_pricing\"),\n          col(\"log_impbus_impressions_pricing.buyer_charges\"),\n          col(\"log_impbus_impressions_pricing.seller_charges\"),\n          f_should_process_views(col(\"log_dw_view\"),\n            f_transaction_event_87047,\n            f_transaction_event_87057\n          )\n        ).getField(\"seller_charges\").getField(\"pricing_terms\")\n      ).cast(BooleanType),\n      v_transaction_event_pricing\n        .getField(\"seller_charges\")\n        .getField(\"pricing_terms\")\n    ).otherwise(seller_charges_pricing_terms_init)\n    has_seller_transacted = when(!_f_has_transacted.cast(BooleanType),\n      v_transaction_event_pricing\n        .getField(\"seller_transacted\")\n        .cast(BooleanType)\n    ).otherwise(_f_has_transacted.cast(BooleanType))\n    has_buyer_transacted = _f_has_transacted.cast(BooleanType)\n    has_buyer_transacted = when(!_f_has_transacted.cast(BooleanType),\n      coalesce(v_transaction_event_pricing\n        .getField(\"buyer_transacted\")\n        .cast(BooleanType),\n        lit(0).cast(BooleanType)\n      )\n    ).otherwise(_f_has_transacted.cast(BooleanType))\n    val _payment_type_normalized = when(\n      _f_is_buy_side === lit(1),\n      coalesce(col(\"log_dw_bid.payment_type\").cast(IntegerType),\n        col(\"log_impbus_impressions.payment_type\").cast(IntegerType),\n        lit(999)\n      )\n    ).otherwise(\n      coalesce(col(\"log_impbus_impressions.payment_type\").cast(IntegerType),\n        lit(999)\n      )\n    )\n      .cast(IntegerType)\n    payment_type_normalized = when(\n      (_f_is_buy_side === lit(1))\n        .and(is_not_null(col(\"buyer_member_id\").cast(IntegerType)))\n        .and(is_not_null(col(\"log_dw_bid.member_id\").cast(IntegerType)))\n        .and(imp_type.isin(lit(6), lit(7)))\n        .and(\n          col(\"buyer_member_id\")\n            .cast(IntegerType) === col(\"log_dw_bid.member_id\").cast(IntegerType)\n        )\n        .and(f_transaction_event_87047 =!= lit(0))\n        .and(f_transaction_event_87057 =!= lit(0))\n        .and(f_transaction_event_87047 =!= f_transaction_event_87057),\n      when(buyer_trx_event_id === lit(1), lit(0))\n        .when(buyer_trx_event_id.isin(lit(16),\n          lit(15),\n          lit(14),\n          lit(13),\n          lit(9),\n          lit(8),\n          lit(7),\n          lit(6),\n          lit(2),\n          lit(5)\n        ),\n          lit(5)\n        )\n        .otherwise(_payment_type_normalized)\n    ).otherwise(_payment_type_normalized).cast(IntegerType)\n    val _revenue_type_normalized = when(\n      _f_is_buy_side === lit(1),\n      coalesce(col(\"log_dw_bid.revenue_type\").cast(IntegerType), lit(0))\n    ).when(is_not_null(col(\"log_dw_bid.payment_type\").cast(IntegerType))\n      .and(col(\"log_dw_bid.payment_type\").cast(IntegerType) === lit(1)),\n      lit(3)\n    )\n      .when(is_not_null(col(\"log_dw_bid.payment_type\").cast(IntegerType))\n        .and(col(\"log_dw_bid.payment_type\").cast(IntegerType) === lit(2)),\n        lit(4)\n      )\n      .otherwise(lit(0))\n      .cast(IntegerType)\n    revenue_type_normalized = when(\n      (_f_is_buy_side === lit(1))\n        .and(is_not_null(col(\"log_dw_bid.log_type\").cast(IntegerType)))\n        .and(imp_type.isin(lit(6), lit(7)))\n        .and(col(\"log_dw_bid.log_type\").cast(IntegerType) === lit(2)),\n      when(\n        (seller_trx_event_id =!= lit(0))\n          .and(buyer_trx_event_id =!= lit(0))\n          .and(seller_trx_event_id =!= buyer_trx_event_id),\n        when(seller_trx_event_id === lit(1), lit(0))\n          .when(seller_trx_event_id.isin(lit(16),\n            lit(15),\n            lit(14),\n            lit(13),\n            lit(9),\n            lit(8),\n            lit(7),\n            lit(6),\n            lit(2),\n            lit(5)\n          ),\n            lit(9)\n          )\n          .otherwise(_revenue_type_normalized)\n          .cast(IntegerType)\n      ).when(\n        (seller_trx_event_id === lit(2)).and(buyer_trx_event_id === lit(2)),\n        lit(9)\n      )\n        .otherwise(_revenue_type_normalized)\n        .cast(IntegerType)\n    ).otherwise(_revenue_type_normalized).cast(IntegerType)\n    val buyer_charges_pricing_terms = f_zero_pricing_term_amount_if_non_cpm(\n      imp_type,\n      payment_type_normalized,\n      revenue_type_normalized,\n      _buyer_charges_pricing_terms\n    )\n    val seller_charges_pricing_terms = f_zero_pricing_term_amount_if_non_cpm(\n      imp_type,\n      payment_type_normalized,\n      revenue_type_normalized,\n      _seller_charges_pricing_terms\n    )\n    view_detection_enabled = _f_view_detection_enabled.cast(IntegerType)\n    view_measurable =\n      f_view_measurable(view_detection_enabled,\n        col(\"log_impbus_view.view_result\").cast(IntegerType)\n      ).cast(IntegerType)\n    viewable = f_viewable(view_measurable,\n      col(\"log_impbus_view.view_result\").cast(IntegerType)\n    ).cast(IntegerType)\n    view_non_measurable_reason = f_view_non_measurable_reason(\n      view_detection_enabled,\n      col(\"log_impbus_view.view_result\").cast(IntegerType)\n    ).cast(IntegerType)\n    viewdef_definition_id = _f_viewdef_definition_id.cast(IntegerType)\n    viewdef_viewable = f_viewdef_viewable(\n      viewdef_definition_id,\n      view_measurable,\n      col(\"log_impbus_view.viewdef_view_result\").cast(IntegerType)\n    ).cast(IntegerType)\n    view_result =\n      f_view_result(view_detection_enabled,\n        col(\"log_impbus_view.view_result\").cast(IntegerType)\n      ).cast(IntegerType)\n    is_budget_table_imp_type =\n      when(col(\"imp_type\")\n        .cast(IntegerType)\n        .isin(5, 7, 9, 11)\n        .or(\n          is_not_null(col(\"log_dw_bid_deal\"))\n            .and(col(\"imp_type\").cast(IntegerType) === lit(6))\n        ),\n        lit(1)\n      ).otherwise(lit(0)).cast(IntegerType)\n    is_not_roadblock_secondary =\n      when(isnull(col(\"log_dw_bid.impression_transaction_type\")).or(\n        col(\"log_dw_bid.impression_transaction_type\")\n          .cast(IntegerType) =!= lit(2)\n      ),\n        lit(1)\n      ).otherwise(lit(0)).cast(IntegerType)\n    is_external_imp_type = when(col(\"imp_type\").cast(IntegerType) === lit(9),\n      lit(1)\n    ).otherwise(lit(0)).cast(IntegerType)\n    is_not_video_imp = when(\n      isnull(col(\"log_dw_bid.revenue_event_type_id\")).or(\n        is_not_null(col(\"log_dw_bid.revenue_event_type_id\").cast(IntegerType))\n          .and(\n            col(\"log_dw_bid.revenue_event_type_id\").cast(IntegerType) =!= lit(5)\n          )\n      ),\n      lit(1)\n    ).otherwise(lit(0)).cast(IntegerType)\n    imps_for_budget_caps_pacing = (is_budget_table_imp_type === lit(1))\n      .and(\n        (is_not_roadblock_secondary === lit(1))\n          .or(is_external_imp_type === lit(1))\n      )\n      .and(is_not_video_imp === lit(1))\n      .cast(IntegerType)\n    val commission_cpm2 =\n      coalesce(col(\"log_dw_bid.commission_cpm\"), lit(0)).cast(DoubleType)\n    val commission_revshare2 =\n      coalesce(col(\"log_dw_bid.commission_revshare\"), lit(0)).cast(DoubleType)\n    val serving_fees_cpm2 =\n      coalesce(col(\"log_dw_bid.serving_fees_cpm\"), lit(0)).cast(DoubleType)\n    val serving_fees_revshare2 =\n      coalesce(col(\"log_dw_bid.serving_fees_revshare\"), lit(0)).cast(DoubleType)\n    media_buy_cost = when(\n      imp_type === lit(6),\n      when(is_not_null(col(\"log_impbus_impressions.media_buy_cost\")).cast(\n        BooleanType\n      ),\n        math_min(col(\"log_impbus_impressions.media_buy_cost\"), lit(999.0d))\n      ).otherwise(lit(0))\n    ).when(is_not_null(col(\"log_dw_bid.media_buy_cost\")).cast(BooleanType),\n      math_min(col(\"log_dw_bid.media_buy_cost\"), lit(999.0d))\n    )\n      .otherwise(lit(0))\n      .cast(DoubleType)\n    media_buy_rev_share_pct =\n      coalesce(col(\"log_impbus_impressions.media_buy_rev_share_pct\"), lit(0))\n        .cast(DoubleType)\n    val _booked_revenue_dollars =\n      when(is_not_null(col(\"log_dw_bid.revenue_info.booked_revenue_dollars\"))\n        .cast(BooleanType),\n        col(\"log_dw_bid.revenue_info.booked_revenue_dollars\")\n      ).otherwise(lit(0)).cast(DoubleType)\n    val booked_revenue_dollars2 = when(\n      is_not_null(col(\"log_dw_view.revenue_info.booked_revenue_dollars\")).cast(\n        BooleanType\n      ),\n      _booked_revenue_dollars + col(\n        \"log_dw_view.revenue_info.booked_revenue_dollars\"\n      )\n    ).otherwise(_booked_revenue_dollars).cast(DoubleType)\n    val _booked_revenue_adv_curr =\n      when(is_not_null(col(\"log_dw_bid.revenue_info.booked_revenue_adv_curr\"))\n        .cast(BooleanType),\n        col(\"log_dw_bid.revenue_info.booked_revenue_adv_curr\")\n      ).otherwise(lit(0)).cast(DoubleType)\n    val booked_revenue_adv_curr2 = when(\n      is_not_null(col(\"log_dw_view.revenue_info.booked_revenue_adv_curr\")).cast(\n        BooleanType\n      ),\n      _booked_revenue_adv_curr + col(\n        \"log_dw_view.revenue_info.booked_revenue_adv_curr\"\n      )\n    ).otherwise(_booked_revenue_adv_curr).cast(DoubleType)\n    val v_pricing_term2 = when(\n      (f_is_non_cpm_payment_or_payment(imp_type,\n        payment_type_normalized,\n        revenue_type_normalized\n      ) === lit(0))\n        .or(is_dw_normalized === lit(1))\n        .or(\n          f_should_process_views(col(\"log_dw_view\"),\n            f_transaction_event_87047,\n            f_transaction_event_87057\n          ) === lit(1)\n        ),\n      f_get_pricing_term(lit(1), buyer_charges_pricing_terms)\n    ).otherwise(v_pricing_term)\n    auction_service_fees = when(\n      (f_is_non_cpm_payment_or_payment(imp_type,\n        payment_type_normalized,\n        revenue_type_normalized\n      ) === lit(0))\n        .or(is_dw_normalized === lit(1))\n        .or(\n          f_should_process_views(col(\"log_dw_view\"),\n            f_transaction_event_87047,\n            f_transaction_event_87057\n          ) === lit(1)\n        )\n        .and(\n          is_not_null(\n            f_get_pricing_term(lit(1), buyer_charges_pricing_terms)\n              .getField(\"amount\")\n          ).and(\n            f_get_pricing_term(lit(1), buyer_charges_pricing_terms)\n              .getField(\"amount\") > lit(0)\n          )\n        )\n        .and(\n          isnull(\n            f_get_pricing_term(lit(1), buyer_charges_pricing_terms)\n              .getField(\"is_deduction\")\n          ).or(\n            is_not_null(\n              f_get_pricing_term(lit(1), buyer_charges_pricing_terms)\n                .getField(\"is_deduction\")\n            ).and(\n              f_get_pricing_term(lit(1), buyer_charges_pricing_terms)\n                .getField(\"is_deduction\") === lit(0)\n            )\n          )\n        ),\n      f_get_pricing_term(lit(1), buyer_charges_pricing_terms).getField(\n        \"amount\"\n      ) / lit(1000)\n    ).otherwise(lit(0)).cast(DoubleType)\n    val v_pricing_term3 = when(\n      (f_is_non_cpm_payment_or_payment(imp_type,\n        payment_type_normalized,\n        revenue_type_normalized\n      ) === lit(0))\n        .or(is_dw_normalized === lit(1))\n        .or(\n          f_should_process_views(col(\"log_dw_view\"),\n            f_transaction_event_87047,\n            f_transaction_event_87057\n          ) === lit(1)\n        ),\n      f_get_pricing_term(lit(1), buyer_charges_pricing_terms)\n    ).otherwise(v_pricing_term2)\n    auction_service_deduction = when(\n      (f_is_non_cpm_payment_or_payment(imp_type,\n        payment_type_normalized,\n        revenue_type_normalized\n      ) === lit(0))\n        .or(is_dw_normalized === lit(1))\n        .or(\n          f_should_process_views(col(\"log_dw_view\"),\n            f_transaction_event_87047,\n            f_transaction_event_87057\n          ) === lit(1)\n        )\n        .and(\n          is_not_null(\n            f_get_pricing_term(lit(1), buyer_charges_pricing_terms)\n              .getField(\"amount\")\n          ).and(\n            f_get_pricing_term(lit(1), buyer_charges_pricing_terms)\n              .getField(\"amount\") > lit(0)\n          )\n        )\n        .and(\n          is_not_null(\n            f_get_pricing_term(lit(1), buyer_charges_pricing_terms)\n              .getField(\"is_deduction\")\n          ).and(\n            f_get_pricing_term(lit(1), buyer_charges_pricing_terms)\n              .getField(\"is_deduction\") === lit(1)\n          )\n        ),\n      f_get_pricing_term(lit(1), buyer_charges_pricing_terms).getField(\n        \"amount\"\n      ) / lit(1000)\n    ).otherwise(lit(0)).cast(DoubleType)\n    val v_pricing_term4 = when(\n      (f_is_non_cpm_payment_or_payment(imp_type,\n        payment_type_normalized,\n        revenue_type_normalized\n      ) === lit(0))\n        .or(is_dw_normalized === lit(1))\n        .or(\n          f_should_process_views(col(\"log_dw_view\"),\n            f_transaction_event_87047,\n            f_transaction_event_87057\n          ) === lit(1)\n        ),\n      f_get_pricing_term(lit(11), buyer_charges_pricing_terms)\n    ).otherwise(v_pricing_term3)\n    creative_overage_fees = when(\n      (f_is_non_cpm_payment_or_payment(imp_type,\n        payment_type_normalized,\n        revenue_type_normalized\n      ) === lit(0))\n        .or(is_dw_normalized === lit(1))\n        .or(\n          f_should_process_views(col(\"log_dw_view\"),\n            f_transaction_event_87047,\n            f_transaction_event_87057\n          ) === lit(1)\n        ),\n      when(\n        is_not_null(\n          f_get_pricing_term(lit(11), buyer_charges_pricing_terms)\n            .getField(\"amount\")\n        ).and(\n          f_get_pricing_term(lit(11), buyer_charges_pricing_terms)\n            .getField(\"amount\") > lit(0)\n        ),\n        f_get_pricing_term(lit(11), buyer_charges_pricing_terms).getField(\n          \"amount\"\n        ) / lit(1000)\n      ).otherwise(lit(0))\n    ).otherwise(lit(0)).cast(DoubleType)\n    v_pricing_term = when(\n      (f_is_non_cpm_payment_or_payment(imp_type,\n        payment_type_normalized,\n        revenue_type_normalized\n      ) === lit(0))\n        .or(is_dw_normalized === lit(1))\n        .or(\n          f_should_process_views(col(\"log_dw_view\"),\n            f_transaction_event_87047,\n            f_transaction_event_87057\n          ) === lit(1)\n        ),\n      f_get_pricing_term(lit(51), buyer_charges_pricing_terms)\n    ).otherwise(v_pricing_term4)\n    discrepancy_allowance = when(\n      (f_is_non_cpm_payment_or_payment(imp_type,\n        payment_type_normalized,\n        revenue_type_normalized\n      ) === lit(0))\n        .or(is_dw_normalized === lit(1))\n        .or(\n          f_should_process_views(col(\"log_dw_view\"),\n            f_transaction_event_87047,\n            f_transaction_event_87057\n          ) === lit(1)\n        ),\n      when(\n        is_not_null(\n          f_get_pricing_term(lit(51), buyer_charges_pricing_terms)\n            .getField(\"amount\")\n        ).and(\n          f_get_pricing_term(lit(51), buyer_charges_pricing_terms)\n            .getField(\"amount\") > lit(0)\n        ),\n        f_get_pricing_term(lit(51), buyer_charges_pricing_terms).getField(\n          \"amount\"\n        ) / lit(1000)\n      ).otherwise(lit(0))\n    ).otherwise(lit(0)).cast(DoubleType)\n    buyer_spend_microcents = when(\n      isnull(col(\"log_dw_bid.payment_type\")).or(\n        is_not_null(col(\"log_dw_bid.payment_type\").cast(IntegerType))\n          .and(col(\"log_dw_bid.payment_type\").cast(IntegerType) =!= lit(1))\n          .and(col(\"log_dw_bid.payment_type\").cast(IntegerType) =!= lit(2))\n      ),\n      coalesce(\n        v_transaction_event_pricing.getField(\"gross_payment_value_microcents\"),\n        lit(0)\n      )\n    ).otherwise(lit(0)).cast(DoubleType)\n    seller_revenue_microcents = when(\n      isnull(col(\"log_dw_bid.payment_type\")).or(\n        is_not_null(col(\"log_dw_bid.payment_type\").cast(IntegerType))\n          .and(col(\"log_dw_bid.payment_type\").cast(IntegerType) =!= lit(1))\n          .and(col(\"log_dw_bid.payment_type\").cast(IntegerType) =!= lit(2))\n      ),\n      coalesce(\n        v_transaction_event_pricing.getField(\"seller_revenue_microcents\"),\n        lit(0)\n      )\n    ).otherwise(lit(0)).cast(DoubleType)\n    buyer_spend_cpm = (buyer_spend_microcents / lit(100000)).cast(DoubleType)\n    seller_revenue_cpm =\n      (seller_revenue_microcents / lit(100000)).cast(DoubleType)\n    media_cost_dollars_cpm = f_get_media_cost_dollars_cpm(\n      imp_type,\n      payment_type_normalized,\n      revenue_type_normalized,\n      media_buy_cost,\n      media_buy_rev_share_pct,\n      seller_revenue_cpm,\n      buyer_spend_cpm,\n      booked_revenue_dollars2,\n      commission_cpm2,\n      commission_revshare2,\n      serving_fees_cpm2,\n      serving_fees_revshare2,\n      col(\"log_impbus_impressions.apply_cost_on_default\").cast(IntegerType),\n      lit(0.0d).cast(DoubleType)\n    ).cast(DoubleType)\n    seller_deduction_term_id_1 = when(\n      (f_is_non_cpm_payment_or_payment(imp_type,\n        payment_type_normalized,\n        revenue_type_normalized\n      ) === lit(0))\n        .and(\n          is_not_null(\n            f_get_pricing_term(lit(1), seller_charges_pricing_terms)\n              .getField(\"amount\")\n          ).cast(BooleanType)\n        )\n        .and(\n          is_not_null(\n            f_get_pricing_term(lit(1), seller_charges_pricing_terms)\n              .getField(\"is_deduction\")\n          ).and(\n            f_get_pricing_term(lit(1), seller_charges_pricing_terms)\n              .getField(\"is_deduction\") === lit(1)\n          )\n        ),\n      f_get_pricing_term(lit(1), seller_charges_pricing_terms).getField(\n        \"amount\"\n      ) / lit(1000)\n    ).otherwise(lit(0)).cast(DoubleType)\n    seller_deduction_term_id_74 = when(\n      (f_is_non_cpm_payment_or_payment(imp_type,\n        payment_type_normalized,\n        revenue_type_normalized\n      ) === lit(0))\n        .and(\n          is_not_null(\n            f_get_pricing_term(lit(74), seller_charges_pricing_terms)\n              .getField(\"amount\")\n          ).cast(BooleanType)\n        )\n        .and(\n          is_not_null(\n            f_get_pricing_term(lit(74), seller_charges_pricing_terms)\n              .getField(\"is_deduction\")\n          ).and(\n            f_get_pricing_term(lit(74), seller_charges_pricing_terms)\n              .getField(\"is_deduction\") === lit(1)\n          )\n        ),\n      f_get_pricing_term(lit(74), seller_charges_pricing_terms).getField(\n        \"amount\"\n      ) / lit(1000)\n    ).otherwise(lit(0)).cast(DoubleType)\n    seller_deduction = when(\n      f_is_non_cpm_payment_or_payment(imp_type,\n        payment_type_normalized,\n        revenue_type_normalized\n      ) === lit(0),\n      math_max(seller_deduction_term_id_1 + seller_deduction_term_id_74, lit(0))\n    ).otherwise(lit(0)).cast(DoubleType)\n    val _deal_type = f_preempt_over_impression_88439.cast(IntegerType)\n    val _deal_id = when(\n      is_not_null(col(\"log_impbus_preempt.deal_id\").cast(IntegerType))\n        .and(col(\"log_impbus_preempt.deal_id\").cast(IntegerType) > lit(0)),\n      col(\"log_impbus_preempt.deal_id\").cast(IntegerType)\n    ).otherwise(lit(0)).cast(IntegerType)\n    is_curated = when(\n      is_not_null(col(\"log_impbus_preempt.curated_deal_id\").cast(IntegerType))\n        .and(\n          col(\"log_impbus_preempt.curated_deal_id\").cast(IntegerType) > lit(0)\n        ),\n      lit(1)\n    ).otherwise(lit(0)).cast(IntegerType)\n    curator_member_id = when(\n      is_not_null(col(\"log_impbus_preempt.curated_deal_id\").cast(IntegerType))\n        .and(\n          col(\"log_impbus_preempt.curated_deal_id\").cast(IntegerType) > lit(0)\n        ),\n      when(is_not_null(sup_common_deal_lookup).cast(BooleanType),\n        sup_common_deal_lookup.getField(\"member_id\")\n      ).otherwise(lit(null).cast(IntegerType))\n    ).otherwise(lit(null).cast(IntegerType)).cast(IntegerType)\n    deal_id = when(\n      is_not_null(col(\"log_impbus_preempt.curated_deal_id\").cast(IntegerType))\n        .and(\n          col(\"log_impbus_preempt.curated_deal_id\").cast(IntegerType) > lit(0)\n        )\n        .and(\n          (imp_type === lit(7))\n            .or((is_dw_normalized === lit(1)).and(imp_type === lit(6)))\n        )\n        .and(imp_type === lit(7)),\n      col(\"log_impbus_preempt.curated_deal_id\").cast(IntegerType)\n    ).otherwise(_deal_id).cast(IntegerType)\n    deal_type = when(\n      is_not_null(col(\"log_impbus_preempt.curated_deal_id\").cast(IntegerType))\n        .and(\n          col(\"log_impbus_preempt.curated_deal_id\").cast(IntegerType) > lit(0)\n        )\n        .and(\n          (imp_type === lit(7))\n            .or((is_dw_normalized === lit(1)).and(imp_type === lit(6)))\n        )\n        .and(imp_type === lit(7)),\n      lit(5)\n    ).otherwise(_deal_type).cast(IntegerType)\n    val buyer_charges_pricing_terms3 = when(is_not_null(buyer_charges_pricing_terms), f_convert_pricing_term_amount(buyer_charges_pricing_terms, lit(1000.0))).otherwise(buyer_charges_pricing_terms)\n    val seller_charges_pricing_terms3 = when(is_not_null(seller_charges_pricing_terms), f_convert_pricing_term_amount(seller_charges_pricing_terms, lit(1000.0))).otherwise(seller_charges_pricing_terms)\n    creative_id = when(\n      isnull(col(\"log_dw_bid\"))\n        .or(imp_type === lit(3))\n        .or(imp_type === lit(4))\n        .or(\n          is_not_null(col(\"log_dw_bid.creative_id\").cast(IntegerType))\n            .and(col(\"log_dw_bid.creative_id\").cast(IntegerType) === lit(0))\n        ),\n      f_preempt_over_impression_88639\n    ).otherwise(col(\"log_dw_bid.creative_id\").cast(IntegerType))\n      .cast(IntegerType)\n    val advertiser_id2 = col(\"advertiser_id\").cast(IntegerType)\n    val campaign_group_id2 = col(\"campaign_group_id\").cast(IntegerType)\n    val insertion_order_id2 = col(\"insertion_order_id\").cast(IntegerType)\n    val _campaign_id = col(\"campaign_id\").cast(IntegerType)\n    val campaign_id2 = when(\n      is_not_null(col(\"log_dw_bid.campaign_id\").cast(IntegerType))\n        .and(col(\"log_dw_bid.campaign_id\").cast(IntegerType) =!= lit(0)),\n      col(\"log_dw_bid.campaign_id\").cast(IntegerType)\n    ).otherwise(_campaign_id).cast(IntegerType)\n    member_sales_tax_rate_pct = when(\n      is_not_null(col(\"log_dw_bid.data_costs\")).cast(BooleanType),\n      coalesce(lookup(\"sup_bidder_member_sales_tax_rate\", buyer_member_id)\n        .getField(\"sales_tax_rate_pct\"),\n        lit(0)\n      )\n    ).otherwise(lit(0)).cast(DoubleType)\n    val data_costs = when(\n      is_not_null(col(\"log_dw_bid.data_costs\")).cast(BooleanType),\n      f_update_data_costs(\n        col(\"log_dw_bid.data_costs\"),\n        imp_type,\n        lit(0),\n        payment_type_normalized,\n        media_cost_dollars_cpm,\n        coalesce(lookup(\"sup_bidder_member_sales_tax_rate\", buyer_member_id)\n          .getField(\"sales_tax_rate_pct\"),\n          lit(0)\n        )\n      )\n    ).otherwise(data_costs_init)\n    val data_costs_deal = when(\n      f_transaction_event_87057 === lit(1),\n      when(\n        is_not_null(col(\"log_dw_bid_deal.data_costs\")).cast(BooleanType),\n        f_update_data_costs_deal(\n          col(\"log_dw_bid_deal.data_costs\"),\n          coalesce(\n            lookup(\"sup_bidder_member_sales_tax_rate\",\n              coalesce(sup_common_deal_lookup_2.getField(\"member_id\"),\n                lit(0)\n              )\n            ).getField(\"sales_tax_rate_pct\"),\n            lit(0)\n          )\n        )\n      ).otherwise(data_costs_deal_init)\n    ).otherwise(data_costs_deal_init)\n    val media_buy_cost2 = when(\n      _f_is_buy_side === lit(0),\n      when(\n        isnull(col(\"log_dw_bid\")).and(\n          (f_is_error_imp(imp_type) === lit(1)).or(\n            is_not_null(col(\"is_dw\").cast(IntegerType))\n              .and(col(\"is_dw\").cast(IntegerType) === lit(1))\n              .and(imp_type.isin(lit(2), lit(4)))\n          )\n        ),\n        lit(0)\n      ).otherwise(media_buy_cost)\n    ).otherwise(media_buy_cost).cast(DoubleType)\n    is_placeholder_bid = when(\n      _f_is_buy_side === lit(0),\n      when(\n        isnull(col(\"log_dw_bid\")).and(\n          (f_is_error_imp(imp_type) === lit(1)).or(\n            is_not_null(col(\"is_dw\").cast(IntegerType))\n              .and(col(\"is_dw\").cast(IntegerType) === lit(1))\n              .and(imp_type.isin(lit(2), lit(4)))\n          )\n        ),\n        lit(1)\n      ).otherwise(lit(0))\n    ).otherwise(lit(0)).cast(IntegerType)\n    val advertiser_id3 = when(\n      _f_is_buy_side === lit(0),\n      when(\n        isnull(col(\"log_dw_bid\")).and(\n          (f_is_error_imp(imp_type) === lit(1)).or(\n            is_not_null(col(\"is_dw\").cast(IntegerType))\n              .and(col(\"is_dw\").cast(IntegerType) === lit(1))\n              .and(imp_type.isin(lit(2), lit(4)))\n          )\n        ),\n        lit(null).cast(IntegerType)\n      ).when(\n        f_is_default_or_error_imp(imp_type) === lit(1),\n        when(f_is_error_imp(imp_type) === lit(1), lit(null).cast(IntegerType))\n          .otherwise(\n            when(f_is_default_or_error_imp(imp_type) === lit(1),\n              lit(null).cast(IntegerType)\n            ).otherwise(advertiser_id2).cast(IntegerType)\n          )\n          .cast(IntegerType)\n      )\n        .when(not(imp_type.isin(lit(5), lit(9), lit(2))),\n          lit(null).cast(IntegerType)\n        )\n        .otherwise(advertiser_id2)\n    ).otherwise(advertiser_id2).cast(IntegerType)\n    serving_fees_revshare = when(\n      _f_is_buy_side === lit(0),\n      when(\n        not(\n          isnull(col(\"log_dw_bid\")).and(\n            (f_is_error_imp(imp_type) === lit(1)).or(\n              is_not_null(col(\"is_dw\").cast(IntegerType))\n                .and(col(\"is_dw\").cast(IntegerType) === lit(1))\n                .and(imp_type.isin(lit(2), lit(4)))\n            )\n          )\n        ).and(not(f_is_default_or_error_imp(imp_type) === lit(1)))\n          .and(not(imp_type.isin(lit(5), lit(9), lit(2)))),\n        lit(null).cast(DoubleType)\n      ).otherwise(serving_fees_revshare2)\n    ).otherwise(serving_fees_revshare2).cast(DoubleType)\n    val split_id = when(\n      _f_is_buy_side === lit(0),\n      when(\n        not(\n          isnull(col(\"log_dw_bid\")).and(\n            (f_is_error_imp(imp_type) === lit(1)).or(\n              is_not_null(col(\"is_dw\").cast(IntegerType))\n                .and(col(\"is_dw\").cast(IntegerType) === lit(1))\n                .and(imp_type.isin(lit(2), lit(4)))\n            )\n          )\n        ).and(not(f_is_default_or_error_imp(imp_type) === lit(1)))\n          .and(not(imp_type.isin(lit(5), lit(9), lit(2)))),\n        lit(0)\n      ).otherwise(split_id_init)\n    ).otherwise(split_id_init).cast(IntegerType)\n    booked_revenue_dollars = when(\n      _f_is_buy_side === lit(0),\n      when(\n        not(\n          isnull(col(\"log_dw_bid\")).and(\n            (f_is_error_imp(imp_type) === lit(1)).or(\n              is_not_null(col(\"is_dw\").cast(IntegerType))\n                .and(col(\"is_dw\").cast(IntegerType) === lit(1))\n                .and(imp_type.isin(lit(2), lit(4)))\n            )\n          )\n        ).and(not(f_is_default_or_error_imp(imp_type) === lit(1)))\n          .and(not(imp_type.isin(lit(5), lit(9), lit(2)))),\n        lit(0)\n      ).otherwise(booked_revenue_dollars2)\n    ).otherwise(booked_revenue_dollars2).cast(DoubleType)\n    serving_fees_cpm = when(\n      _f_is_buy_side === lit(0),\n      when(\n        not(\n          isnull(col(\"log_dw_bid\")).and(\n            (f_is_error_imp(imp_type) === lit(1)).or(\n              is_not_null(col(\"is_dw\").cast(IntegerType))\n                .and(col(\"is_dw\").cast(IntegerType) === lit(1))\n                .and(imp_type.isin(lit(2), lit(4)))\n            )\n          )\n        ).and(not(f_is_default_or_error_imp(imp_type) === lit(1)))\n          .and(not(imp_type.isin(lit(5), lit(9), lit(2)))),\n        lit(null).cast(DoubleType)\n      ).otherwise(serving_fees_cpm2)\n    ).otherwise(serving_fees_cpm2).cast(DoubleType)\n    val insertion_order_id3 = when(\n      _f_is_buy_side === lit(0),\n      when(\n        not(\n          isnull(col(\"log_dw_bid\")).and(\n            (f_is_error_imp(imp_type) === lit(1)).or(\n              is_not_null(col(\"is_dw\").cast(IntegerType))\n                .and(col(\"is_dw\").cast(IntegerType) === lit(1))\n                .and(imp_type.isin(lit(2), lit(4)))\n            )\n          )\n        ).and(not(f_is_default_or_error_imp(imp_type) === lit(1)))\n          .and(not(imp_type.isin(lit(5), lit(9), lit(2)))),\n        lit(null).cast(IntegerType)\n      ).otherwise(insertion_order_id2)\n    ).otherwise(insertion_order_id2).cast(IntegerType)\n    val campaign_group_id3 = when(\n      _f_is_buy_side === lit(0),\n      when(\n        isnull(col(\"log_dw_bid\")).and(\n          (f_is_error_imp(imp_type) === lit(1)).or(\n            is_not_null(col(\"is_dw\").cast(IntegerType))\n              .and(col(\"is_dw\").cast(IntegerType) === lit(1))\n              .and(imp_type.isin(lit(2), lit(4)))\n          )\n        ),\n        lit(null).cast(IntegerType)\n      ).when(\n        f_is_default_or_error_imp(imp_type) === lit(1),\n        when(f_is_error_imp(imp_type) === lit(1), lit(null).cast(IntegerType))\n          .otherwise(\n            when(f_is_default_or_error_imp(imp_type) === lit(1),\n              lit(null).cast(IntegerType)\n            ).otherwise(campaign_group_id2).cast(IntegerType)\n          )\n          .cast(IntegerType)\n      )\n        .when(not(imp_type.isin(lit(5), lit(9), lit(2))),\n          lit(null).cast(IntegerType)\n        )\n        .otherwise(campaign_group_id2)\n    ).otherwise(campaign_group_id2).cast(IntegerType)\n    commission_cpm = when(\n      _f_is_buy_side === lit(0),\n      when(\n        not(\n          isnull(col(\"log_dw_bid\")).and(\n            (f_is_error_imp(imp_type) === lit(1)).or(\n              is_not_null(col(\"is_dw\").cast(IntegerType))\n                .and(col(\"is_dw\").cast(IntegerType) === lit(1))\n                .and(imp_type.isin(lit(2), lit(4)))\n            )\n          )\n        ).and(not(f_is_default_or_error_imp(imp_type) === lit(1)))\n          .and(not(imp_type.isin(lit(5), lit(9), lit(2)))),\n        lit(0)\n      ).otherwise(commission_cpm2)\n    ).otherwise(commission_cpm2).cast(DoubleType)\n    commission_revshare = when(\n      _f_is_buy_side === lit(0),\n      when(\n        not(\n          isnull(col(\"log_dw_bid\")).and(\n            (f_is_error_imp(imp_type) === lit(1)).or(\n              is_not_null(col(\"is_dw\").cast(IntegerType))\n                .and(col(\"is_dw\").cast(IntegerType) === lit(1))\n                .and(imp_type.isin(lit(2), lit(4)))\n            )\n          )\n        ).and(not(f_is_default_or_error_imp(imp_type) === lit(1)))\n          .and(not(imp_type.isin(lit(5), lit(9), lit(2)))),\n        lit(null).cast(DoubleType)\n      ).otherwise(commission_revshare2)\n    ).otherwise(commission_revshare2).cast(DoubleType)\n    val campaign_id3 = when(\n      _f_is_buy_side === lit(0),\n      when(\n        not(\n          isnull(col(\"log_dw_bid\")).and(\n            (f_is_error_imp(imp_type) === lit(1)).or(\n              is_not_null(col(\"is_dw\").cast(IntegerType))\n                .and(col(\"is_dw\").cast(IntegerType) === lit(1))\n                .and(imp_type.isin(lit(2), lit(4)))\n            )\n          )\n        ).and(not(f_is_default_or_error_imp(imp_type) === lit(1)))\n          .and(not(imp_type.isin(lit(5), lit(9), lit(2)))),\n        lit(null).cast(IntegerType)\n      ).otherwise(campaign_id2)\n    ).otherwise(campaign_id2).cast(IntegerType)\n    val revenue_value = when(\n      _f_is_buy_side === lit(0),\n      when(\n        not(\n          isnull(col(\"log_dw_bid\")).and(\n            (f_is_error_imp(imp_type) === lit(1)).or(\n              is_not_null(col(\"is_dw\").cast(IntegerType))\n                .and(col(\"is_dw\").cast(IntegerType) === lit(1))\n                .and(imp_type.isin(lit(2), lit(4)))\n            )\n          )\n        ).and(not(f_is_default_or_error_imp(imp_type) === lit(1)))\n          .and(not(imp_type.isin(lit(5), lit(9), lit(2)))),\n        lit(0)\n      ).otherwise(revenue_value_init)\n    ).otherwise(revenue_value_init).cast(DoubleType)\n    booked_revenue_adv_curr = when(\n      _f_is_buy_side === lit(0),\n      when(\n        not(\n          isnull(col(\"log_dw_bid\")).and(\n            (f_is_error_imp(imp_type) === lit(1)).or(\n              is_not_null(col(\"is_dw\").cast(IntegerType))\n                .and(col(\"is_dw\").cast(IntegerType) === lit(1))\n                .and(imp_type.isin(lit(2), lit(4)))\n            )\n          )\n        ).and(not(f_is_default_or_error_imp(imp_type) === lit(1)))\n          .and(not(imp_type.isin(lit(5), lit(9), lit(2)))),\n        lit(0)\n      ).otherwise(booked_revenue_adv_curr2)\n    ).otherwise(booked_revenue_adv_curr2).cast(DoubleType)\n    campaign_id = when(is_not_null(col(\"log_dw_bid_deal\")).cast(BooleanType),\n      col(\"campaign_id\").cast(IntegerType)\n    ).otherwise(campaign_id3).cast(IntegerType)\n    advertiser_id = when(\n      is_not_null(col(\"log_dw_bid_deal\")).cast(BooleanType),\n      when(\n        imp_type === lit(6),\n        when(\n          is_not_null(col(\"log_dw_bid_deal.advertiser_id\").cast(IntegerType))\n            .and(\n              col(\"log_dw_bid_deal.advertiser_id\").cast(IntegerType) =!= lit(0)\n            ),\n          col(\"log_dw_bid_deal.advertiser_id\").cast(IntegerType)\n        ).otherwise(col(\"advertiser_id\").cast(IntegerType))\n      ).otherwise(col(\"advertiser_id\").cast(IntegerType)).cast(IntegerType)\n    ).otherwise(advertiser_id3).cast(IntegerType)\n    campaign_group_id = when(\n      is_not_null(col(\"log_dw_bid_deal\")).cast(BooleanType),\n      when(\n        imp_type === lit(6),\n        when(\n          is_not_null(\n            col(\"log_dw_bid_deal.campaign_group_id\").cast(IntegerType)\n          ).and(\n            col(\"log_dw_bid_deal.campaign_group_id\").cast(IntegerType) =!= lit(\n              0\n            )\n          ),\n          col(\"log_dw_bid_deal.campaign_group_id\").cast(IntegerType)\n        ).otherwise(col(\"campaign_group_id\").cast(IntegerType))\n      ).otherwise(col(\"campaign_group_id\").cast(IntegerType)).cast(IntegerType)\n    ).otherwise(campaign_group_id3).cast(IntegerType)\n    insertion_order_id = when(\n      is_not_null(col(\"log_dw_bid_deal\")).cast(BooleanType),\n      when(\n        imp_type === lit(6),\n        when(\n          is_not_null(\n            col(\"log_dw_bid_deal.insertion_order_id\").cast(IntegerType)\n          ).and(\n            col(\"log_dw_bid_deal.insertion_order_id\").cast(IntegerType) =!= lit(\n              0\n            )\n          ),\n          col(\"log_dw_bid_deal.insertion_order_id\").cast(IntegerType)\n        ).otherwise(col(\"insertion_order_id\").cast(IntegerType))\n      ).otherwise(col(\"insertion_order_id\").cast(IntegerType)).cast(IntegerType)\n    ).otherwise(insertion_order_id3).cast(IntegerType)\n    flight_id = when(\n      is_not_null(col(\"log_dw_bid_deal\"))\n        .cast(BooleanType)\n        .and(imp_type === lit(6))\n        .and(\n          is_not_null(\n            col(\"log_dw_bid_deal.campaign_group_budget_interval_id\")\n              .cast(IntegerType)\n          ).and(\n            col(\"log_dw_bid_deal.campaign_group_budget_interval_id\")\n              .cast(IntegerType) =!= lit(0)\n          )\n        ),\n      col(\"log_dw_bid_deal.campaign_group_budget_interval_id\").cast(IntegerType)\n    ).otherwise(lit(null).cast(IntegerType)).cast(IntegerType)\n    billing_period_id = when(\n      is_not_null(col(\"log_dw_bid_deal\"))\n        .cast(BooleanType)\n        .and(imp_type === lit(6))\n        .and(\n          is_not_null(\n            col(\"log_dw_bid_deal.insertion_order_budget_interval_id\")\n              .cast(IntegerType)\n          ).and(\n            col(\"log_dw_bid_deal.insertion_order_budget_interval_id\")\n              .cast(IntegerType) =!= lit(0)\n          )\n        ),\n      col(\"log_dw_bid_deal.insertion_order_budget_interval_id\").cast(\n        IntegerType\n      )\n    ).otherwise(lit(null).cast(IntegerType)).cast(IntegerType)\n    should_zero_seller_revenue = f_should_zero_seller_revenue(\n      col(\"log_dw_bid\"),\n      col(\"imp_type\").cast(IntegerType),\n      revenue_type_normalized,\n      col(\"seller_member_id\").cast(IntegerType),\n      col(\n        \"log_impbus_impressions_pricing.impression_event_pricing.seller_revenue_microcents\"\n      ).cast(LongType)\n    ).cast(BooleanType)\n    netflix_ppid = when(\n      is_not_null(col(\"seller_member_id\").cast(IntegerType)).and(\n        (col(\"seller_member_id\").cast(IntegerType) === lit(14007))\n          .or(col(\"seller_member_id\").cast(IntegerType) === lit(14120))\n          .or(col(\"seller_member_id\").cast(IntegerType) === lit(14136))\n      ),\n      when(\n        is_not_null(_f_find_personal_identifier).and(\n          is_not_null(_f_find_personal_identifier.getField(\"identity_value\"))\n        ),\n        _f_find_personal_identifier.getField(\"identity_value\")\n      ).otherwise(lit(null).cast(StringType))\n    ).otherwise(lit(null).cast(StringType))\n    struct(\n      curator_member_id.as(\"curator_member_id_var\"),\n      discrepancy_allowance.as(\"discrepancy_allowance_var\"),\n      should_process_views.as(\"should_process_views_var\"),\n      buyer_member_id.as(\"buyer_member_id_var\"),\n      imps_for_budget_caps_pacing.as(\"imps_for_budget_caps_pacing_var\"),\n      coalesce(col(\"imp_type\").cast(IntegerType), lit(1)).as(\"imp_type_var\"),\n      is_curated.as(\"is_curated_var\"),\n      view_detection_enabled.as(\"view_detection_enabled_var\"),\n      buyer_trx_event_type_id.as(\"buyer_trx_event_type_id_var\"),\n      commission_revshare.as(\"commission_revshare_var\"),\n      creative_overage_fees.as(\"creative_overage_fees_var\"),\n      viewdef_definition_id.as(\"viewdef_definition_id_var\"),\n      has_buyer_transacted.as(\"has_buyer_transacted_var\"),\n      payment_type_normalized.as(\"payment_type_normalized_var\"),\n      seller_trx_event_id.as(\"seller_trx_event_id_var\"),\n      seller_revenue_cpm.as(\"seller_revenue_cpm_var\"),\n      insertion_order_id.as(\"insertion_order_id_var\"),\n      revenue_type_normalized.as(\"revenue_type_normalized_var\"),\n      billing_period_id.as(\"billing_period_id_var\"),\n      viewdef_viewable.as(\"viewdef_viewable_var\"),\n      split_id.as(\"split_id_var\"),\n      data_costs_deal.as(\"data_costs_deal_var\"),\n      seller_charges_pricing_terms3.as(\"seller_charges_pricing_terms_var\"),\n      f_preempt_over_impression_94298.as(\"f_preempt_over_impression_94298_var\"),\n      commission_cpm.as(\"commission_cpm_var\"),\n      v_transaction_event_pricing.as(\"v_transaction_event_pricing_var\"),\n      buyer_trx_event_id.as(\"buyer_trx_event_id_var\"),\n      campaign_group_id.as(\"campaign_group_id_var\"),\n      has_seller_transacted.as(\"has_seller_transacted_var\"),\n      buyer_charges_pricing_terms3.as(\"buyer_charges_pricing_terms_var\"),\n      revenue_value.as(\"revenue_value_var\"),\n      netflix_ppid.as(\"netflix_ppid_var\"),\n      campaign_group_type_id.as(\"campaign_group_type_id_var\"),\n      should_zero_seller_revenue.as(\"should_zero_seller_revenue_var\"),\n      view_measurable.as(\"view_measurable_var\"),\n      advertiser_id.as(\"advertiser_id_var\"),\n      media_cost_dollars_cpm.as(\"media_cost_dollars_cpm_var\"),\n      creative_id.as(\"creative_id_var\"),\n      f_preempt_over_impression_95337.as(\"f_preempt_over_impression_95337_var\"),\n      flight_id.as(\"flight_id_var\"),\n      viewable.as(\"viewable_var\"),\n      auction_service_deduction.as(\"auction_service_deduction_var\"),\n      media_buy_cost2.as(\"media_buy_cost2_var\"),\n      seller_deduction.as(\"seller_deduction_var\"),\n      buyer_spend_cpm.as(\"buyer_spend_cpm_var\"),\n      seller_trx_event_type_id.as(\"seller_trx_event_type_id_var\"),\n      auction_service_fees.as(\"auction_service_fees_var\"),\n      serving_fees_cpm.as(\"serving_fees_cpm_var\"),\n      data_costs.as(\"data_costs_var\"),\n      sup_ip_range_lookup_count.as(\"sup_ip_range_lookup_count_var\"),\n      ttl.as(\"ttl_var\"),\n      view_result.as(\"view_result_var\"),\n      is_dw_normalized.as(\"is_dw_normalized_var\"),\n      booked_revenue_adv_curr.as(\"booked_revenue_adv_curr_var\"),\n      booked_revenue_dollars.as(\"booked_revenue_dollars_var\"),\n      deal_id.as(\"deal_id_var\"),\n      _f_is_buy_side.as(\"_f_is_buy_side_var\"),\n      deal_type.as(\"deal_type_var\"),\n      campaign_id.as(\"campaign_id_var\"),\n      is_placeholder_bid.as(\"is_placeholder_bid_var\"),\n      serving_fees_revshare.as(\"serving_fees_revshare_var\"),\n      view_non_measurable_reason.as(\"view_non_measurable_reason_var\"),\n      _f_is_default_or_error_imp.as(\"_f_is_default_or_error_imp_var\"),\n      _f_is_error_imp.as(\"_f_is_error_imp_var\"),\n      when(\n        _f_is_buy_side === lit(0),\n        when(\n          isnull(col(\"log_dw_bid\")).and(\n            (_f_is_error_imp === lit(1)).or(\n              is_not_null(col(\"is_dw\").cast(IntegerType))\n                .and(col(\"is_dw\").cast(IntegerType) === lit(1))\n                .and(imp_type.isin(lit(2), lit(4)))\n            )\n          ),\n          lit(-2)\n        ).otherwise(\n          when(\n            _f_is_default_or_error_imp === lit(1),\n            when(col(\"log_dw_bid\").isNotNull,\n              col(\"log_dw_bid\").getField(\"creative_freq\")\n            ).when(_f_is_default_or_error_imp === lit(1), lit(-2))\n              .when(_f_is_error_imp === lit(1), lit(null).cast(IntegerType))\n              .otherwise(lit(null).cast(IntegerType))\n          ).otherwise(\n            when(imp_type.isin(lit(5), lit(9), lit(2)),\n              col(\"log_dw_bid\").getField(\"creative_freq\")\n            ).otherwise(lit(-1))\n          )\n        )\n      ).otherwise(lit(null).cast(IntegerType))\n        .as(\"virtual_log_dw_bid_creative_freq\"),\n      when(\n        _f_is_buy_side === lit(0),\n        when(\n          isnull(col(\"log_dw_bid\")).and(\n            (_f_is_error_imp === lit(1)).or(\n              is_not_null(col(\"is_dw\").cast(IntegerType))\n                .and(col(\"is_dw\").cast(IntegerType) === lit(1))\n                .and(imp_type.isin(lit(2), lit(4)))\n            )\n          ),\n          lit(-2)\n        ).otherwise(\n          when(\n            _f_is_default_or_error_imp === lit(1),\n            when(col(\"log_dw_bid\").isNotNull,\n              col(\"log_dw_bid\").getField(\"creative_rec\")\n            ).when(_f_is_default_or_error_imp === lit(1), lit(-2))\n              .when(_f_is_error_imp === lit(1), lit(null).cast(IntegerType))\n              .otherwise(lit(null).cast(IntegerType))\n          ).otherwise(\n            when(imp_type.isin(lit(5), lit(9), lit(2)),\n              col(\"log_dw_bid\").getField(\"creative_rec\")\n            ).otherwise(lit(-1))\n          )\n        )\n      ).otherwise(lit(null).cast(IntegerType))\n        .as(\"virtual_log_dw_bid_creative_rec\"),\n      when(\n        _f_is_buy_side === lit(0),\n        when(\n          isnull(col(\"log_dw_bid\")).and(\n            (_f_is_error_imp === lit(1)).or(\n              is_not_null(col(\"is_dw\").cast(IntegerType))\n                .and(col(\"is_dw\").cast(IntegerType) === lit(1))\n                .and(imp_type.isin(lit(2), lit(4)))\n            )\n          ),\n          lit(-2)\n        ).otherwise(\n          when(\n            _f_is_default_or_error_imp === lit(1),\n            when(col(\"log_dw_bid\").isNotNull,\n              col(\"log_dw_bid\").getField(\"advertiser_freq\")\n            ).when(_f_is_default_or_error_imp === lit(1), lit(-2))\n              .when(_f_is_error_imp === lit(1), lit(null).cast(IntegerType))\n              .otherwise(lit(null).cast(IntegerType))\n          ).otherwise(\n            when(imp_type.isin(lit(5), lit(9), lit(2)),\n              col(\"log_dw_bid\").getField(\"advertiser_freq\")\n            ).otherwise(lit(-1))\n          )\n        )\n      ).otherwise(lit(null).cast(IntegerType))\n        .as(\"virtual_log_dw_bid_advertiser_freq\"),\n      when(\n        _f_is_buy_side === lit(0),\n        when(\n          isnull(col(\"log_dw_bid\")).and(\n            (_f_is_error_imp === lit(1)).or(\n              is_not_null(col(\"is_dw\").cast(IntegerType))\n                .and(col(\"is_dw\").cast(IntegerType) === lit(1))\n                .and(imp_type.isin(lit(2), lit(4)))\n            )\n          ),\n          lit(-2)\n        ).otherwise(\n          when(\n            _f_is_default_or_error_imp === lit(1),\n            when(col(\"log_dw_bid\").isNotNull,\n              col(\"log_dw_bid\").getField(\"advertiser_rec\")\n            ).when(_f_is_default_or_error_imp === lit(1), lit(-2))\n              .when(_f_is_error_imp === lit(1), lit(null).cast(IntegerType))\n              .otherwise(lit(null).cast(IntegerType))\n          ).otherwise(\n            when(imp_type.isin(lit(5), lit(9), lit(2)),\n              col(\"log_dw_bid\").getField(\"advertiser_rec\")\n            ).otherwise(lit(-1))\n          )\n        )\n      ).otherwise(lit(null).cast(IntegerType))\n        .as(\"virtual_log_dw_bid_advertiser_rec\"),\n      when(\n        _f_is_buy_side === lit(0),\n        when(\n          isnull(col(\"log_dw_bid\")).and(\n            (_f_is_error_imp === lit(1)).or(\n              is_not_null(col(\"is_dw\").cast(IntegerType))\n                .and(col(\"is_dw\").cast(IntegerType) === lit(1))\n                .and(imp_type.isin(lit(2), lit(4)))\n            )\n          ),\n          lit(null).cast(IntegerType)\n        ).otherwise(\n          when(\n            _f_is_default_or_error_imp === lit(1),\n            when(col(\"log_dw_bid\").isNotNull,\n              col(\"log_dw_bid\").getField(\"log_type\")\n            ).when(_f_is_default_or_error_imp === lit(1),\n              lit(null).cast(IntegerType)\n            )\n              .when(_f_is_error_imp === lit(1), lit(null).cast(IntegerType))\n              .otherwise(lit(null).cast(IntegerType))\n          ).otherwise(\n            when(imp_type.isin(lit(5), lit(9), lit(2)),\n              col(\"log_dw_bid\").getField(\"log_type\")\n            ).otherwise(lit(2))\n          )\n        )\n      ).otherwise(lit(null).cast(IntegerType))\n        .as(\"virtual_log_dw_bid_log_type\"),\n      when(\n        _f_is_buy_side === lit(0),\n        when(\n          isnull(col(\"log_dw_bid\")).and(\n            (_f_is_error_imp === lit(1)).or(\n              is_not_null(col(\"is_dw\").cast(IntegerType))\n                .and(col(\"is_dw\").cast(IntegerType) === lit(1))\n                .and(imp_type.isin(lit(2), lit(4)))\n            )\n          ),\n          lit(\"---\")\n        ).otherwise(\n          when(\n            _f_is_default_or_error_imp === lit(1),\n            when(col(\"log_dw_bid\").isNotNull,\n              col(\"log_dw_bid\").getField(\"pricing_type\")\n            ).when(_f_is_default_or_error_imp === lit(1),\n              lit(null).cast(StringType)\n            )\n              .when(_f_is_error_imp === lit(1), lit(\"---\"))\n              .otherwise(lit(null).cast(StringType))\n          ).otherwise(\n            when(imp_type.isin(lit(5), lit(9), lit(2)),\n              col(\"log_dw_bid\").getField(\"pricing_type\")\n            ).otherwise(lit(\"---\"))\n          )\n        )\n      ).otherwise(lit(null).cast(StringType))\n        .as(\"virtual_log_dw_bid_pricing_type\"),\n      when(\n        _f_is_buy_side === lit(0),\n        when(\n          isnull(col(\"log_dw_bid\")).and(\n            (_f_is_error_imp === lit(1)).or(\n              is_not_null(col(\"is_dw\").cast(IntegerType))\n                .and(col(\"is_dw\").cast(IntegerType) === lit(1))\n                .and(imp_type.isin(lit(2), lit(4)))\n            )\n          ),\n          lit(2)\n        ).otherwise(\n          when(\n            _f_is_default_or_error_imp === lit(1),\n            when(col(\"log_dw_bid\").isNotNull,\n              col(\"log_dw_bid\").getField(\"is_control\")\n            ).when(_f_is_default_or_error_imp === lit(1),\n              lit(null).cast(IntegerType)\n            )\n              .when(_f_is_error_imp === lit(1), lit(2).cast(IntegerType))\n              .otherwise(lit(null).cast(IntegerType))\n          ).otherwise(\n            when(imp_type.isin(lit(5), lit(9), lit(2)),\n              col(\"log_dw_bid\").getField(\"is_control\")\n            ).otherwise(lit(null).cast(IntegerType))\n          )\n        )\n      ).otherwise(lit(null).cast(IntegerType))\n        .as(\"virtual_log_dw_bid_is_control\"),\n      when(\n        _f_is_buy_side === lit(0),\n        when(\n          isnull(col(\"log_dw_bid\")).and(\n            (_f_is_error_imp === lit(1)).or(\n              is_not_null(col(\"is_dw\").cast(IntegerType))\n                .and(col(\"is_dw\").cast(IntegerType) === lit(1))\n                .and(imp_type.isin(lit(2), lit(4)))\n            )\n          ),\n          lit(1.0d)\n        ).otherwise(\n          when(\n            _f_is_default_or_error_imp === lit(1),\n            when(col(\"log_dw_bid\").isNotNull,\n              col(\"log_dw_bid\").getField(\"cadence_modifier\")\n            ).when(_f_is_default_or_error_imp === lit(1),\n              lit(0).cast(DoubleType)\n            )\n              .when(_f_is_error_imp === lit(1), lit(1).cast(DoubleType))\n              .otherwise(lit(null).cast(DoubleType))\n          ).otherwise(\n            when(imp_type.isin(lit(5), lit(9), lit(2)),\n              col(\"log_dw_bid\").getField(\"cadence_modifier\")\n            ).otherwise(lit(null).cast(DoubleType))\n          )\n        )\n      ).otherwise(lit(null).cast(DoubleType))\n        .as(\"virtual_log_dw_bid_cadence_modifier\"),\n      when(\n        _f_is_buy_side === lit(0),\n        when(\n          isnull(col(\"log_dw_bid\")).and(\n            (_f_is_error_imp === lit(1)).or(\n              is_not_null(col(\"is_dw\").cast(IntegerType))\n                .and(col(\"is_dw\").cast(IntegerType) === lit(1))\n                .and(imp_type.isin(lit(2), lit(4)))\n            )\n          ),\n          lit(-1)\n        ).otherwise(\n          when(\n            _f_is_default_or_error_imp === lit(1),\n            when(col(\"log_dw_bid\").isNotNull,\n              col(\"log_dw_bid\").getField(\"predict_type\")\n            ).when(_f_is_default_or_error_imp === lit(1),\n              lit(null).cast(IntegerType)\n            )\n              .when(_f_is_error_imp === lit(1), lit(-1).cast(IntegerType))\n              .otherwise(lit(null).cast(IntegerType))\n          ).otherwise(\n            when(imp_type.isin(lit(5), lit(9), lit(2)),\n              col(\"log_dw_bid\").getField(\"predict_type\")\n            ).otherwise(lit(-2).cast(IntegerType))\n          )\n        )\n      ).otherwise(lit(null).cast(IntegerType))\n        .as(\"virtual_log_dw_bid_predict_type\"),\n      when(\n        _f_is_buy_side === lit(0),\n        when(\n          isnull(col(\"log_dw_bid\")).and(\n            (_f_is_error_imp === lit(1)).or(\n              is_not_null(col(\"is_dw\").cast(IntegerType))\n                .and(col(\"is_dw\").cast(IntegerType) === lit(1))\n                .and(imp_type.isin(lit(2), lit(4)))\n            )\n          ),\n          lit(-1)\n        ).otherwise(\n          when(\n            _f_is_default_or_error_imp === lit(1),\n            when(col(\"log_dw_bid\").isNotNull,\n              col(\"log_dw_bid\").getField(\"predict_type_goal\")\n            ).when(_f_is_default_or_error_imp === lit(1),\n              lit(null).cast(IntegerType)\n            )\n              .when(_f_is_error_imp === lit(1), lit(-1).cast(IntegerType))\n              .otherwise(lit(null).cast(IntegerType))\n          ).otherwise(\n            when(imp_type.isin(lit(5), lit(9), lit(2)),\n              col(\"log_dw_bid\").getField(\"predict_type_goal\")\n            ).otherwise(lit(-2).cast(IntegerType))\n          )\n        )\n      ).otherwise(lit(null).cast(IntegerType))\n        .as(\"virtual_log_dw_bid_predict_type_goal\"),\n      when(\n        _f_is_buy_side === lit(0),\n        when(\n          isnull(col(\"log_dw_bid\")).and(\n            (_f_is_error_imp === lit(1)).or(\n              is_not_null(col(\"is_dw\").cast(IntegerType))\n                .and(col(\"is_dw\").cast(IntegerType) === lit(1))\n                .and(imp_type.isin(lit(2), lit(4)))\n            )\n          ),\n          lit(-2)\n        ).otherwise(\n          when(\n            _f_is_default_or_error_imp === lit(1),\n            when(col(\"log_dw_bid\").isNotNull,\n              col(\"log_dw_bid\").getField(\"campaign_group_freq\")\n            ).when(_f_is_default_or_error_imp === lit(1), lit(-2))\n              .when(_f_is_error_imp === lit(1), lit(null).cast(IntegerType))\n              .otherwise(lit(null).cast(IntegerType))\n          ).otherwise(\n            when(imp_type.isin(lit(5), lit(9), lit(2)),\n              col(\"log_dw_bid\").getField(\"campaign_group_freq\")\n            ).otherwise(lit(-1))\n          )\n        )\n      ).otherwise(lit(null).cast(IntegerType))\n        .as(\"virtual_log_dw_bid_campaign_group_freq\"),\n      when(\n        _f_is_buy_side === lit(0),\n        when(\n          isnull(col(\"log_dw_bid\")).and(\n            (_f_is_error_imp === lit(1)).or(\n              is_not_null(col(\"is_dw\").cast(IntegerType))\n                .and(col(\"is_dw\").cast(IntegerType) === lit(1))\n                .and(imp_type.isin(lit(2), lit(4)))\n            )\n          ),\n          lit(-2)\n        ).otherwise(\n          when(\n            _f_is_default_or_error_imp === lit(1),\n            when(col(\"log_dw_bid\").isNotNull,\n              col(\"log_dw_bid\").getField(\"campaign_group_rec\")\n            ).when(_f_is_default_or_error_imp === lit(1), lit(-2))\n              .when(_f_is_error_imp === lit(1), lit(null).cast(IntegerType))\n              .otherwise(lit(null).cast(IntegerType))\n          ).otherwise(\n            when(imp_type.isin(lit(5), lit(9), lit(2)),\n              col(\"log_dw_bid\").getField(\"campaign_group_rec\")\n            ).otherwise(lit(-1).cast(IntegerType))\n          )\n        )\n      ).otherwise(lit(null).cast(IntegerType))\n        .as(\"virtual_log_dw_bid_campaign_group_rec\"),\n      when(\n        _f_is_buy_side === lit(0),\n        when(\n          isnull(col(\"log_dw_bid\")).and(\n            (_f_is_error_imp === lit(1)).or(\n              is_not_null(col(\"is_dw\").cast(IntegerType))\n                .and(col(\"is_dw\").cast(IntegerType) === lit(1))\n                .and(imp_type.isin(lit(2), lit(4)))\n            )\n          ),\n          lit(-2)\n        ).otherwise(\n          when(\n            _f_is_default_or_error_imp === lit(1),\n            when(col(\"log_dw_bid\").isNotNull,\n              col(\"log_dw_bid\").getField(\"insertion_order_freq\")\n            ).when(_f_is_default_or_error_imp === lit(1), lit(-2))\n              .when(_f_is_error_imp === lit(1), lit(null).cast(IntegerType))\n              .otherwise(lit(null).cast(IntegerType))\n          ).otherwise(\n            when(imp_type.isin(lit(5), lit(9), lit(2)),\n              col(\"log_dw_bid\").getField(\"insertion_order_freq\")\n            ).otherwise(lit(-1).cast(IntegerType))\n          )\n        )\n      ).otherwise(lit(null).cast(IntegerType))\n        .as(\"virtual_log_dw_bid_insertion_order_freq\"),\n      when(\n        _f_is_buy_side === lit(0),\n        when(\n          isnull(col(\"log_dw_bid\")).and(\n            (_f_is_error_imp === lit(1)).or(\n              is_not_null(col(\"is_dw\").cast(IntegerType))\n                .and(col(\"is_dw\").cast(IntegerType) === lit(1))\n                .and(imp_type.isin(lit(2), lit(4)))\n            )\n          ),\n          lit(-2)\n        ).otherwise(\n          when(\n            _f_is_default_or_error_imp === lit(1),\n            when(col(\"log_dw_bid\").isNotNull,\n              col(\"log_dw_bid\").getField(\"insertion_order_rec\")\n            ).when(_f_is_default_or_error_imp === lit(1), lit(-2))\n              .when(_f_is_error_imp === lit(1), lit(null).cast(IntegerType))\n              .otherwise(lit(null).cast(IntegerType))\n          ).otherwise(\n            when(imp_type.isin(lit(5), lit(9), lit(2)),\n              col(\"log_dw_bid\").getField(\"insertion_order_rec\")\n            ).otherwise(lit(-1).cast(IntegerType))\n          )\n        )\n      ).otherwise(lit(null).cast(IntegerType))\n        .as(\"virtual_log_dw_bid_insertion_order_rec\"),\n      when(\n        _f_is_buy_side === lit(0),\n        when(\n          isnull(col(\"log_dw_bid\")).and(\n            (_f_is_error_imp === lit(1)).or(\n              is_not_null(col(\"is_dw\").cast(IntegerType))\n                .and(col(\"is_dw\").cast(IntegerType) === lit(1))\n                .and(imp_type.isin(lit(2), lit(4)))\n            )\n          ),\n          lit(\"--\")\n        ).otherwise(\n          when(\n            _f_is_default_or_error_imp === lit(1),\n            when(col(\"log_dw_bid\").isNotNull,\n              col(\"log_dw_bid\").getField(\"custom_model_output_code\")\n            ).when(_f_is_default_or_error_imp === lit(1),\n              lit(null).cast(StringType)\n            )\n              .when(_f_is_error_imp === lit(1), lit(null).cast(StringType))\n              .otherwise(lit(null).cast(StringType))\n          ).otherwise(\n            when(imp_type.isin(lit(5), lit(9), lit(2)),\n              col(\"log_dw_bid\").getField(\"custom_model_output_code\")\n            ).otherwise(lit(\"---\").cast(StringType))\n          )\n        )\n      ).otherwise(lit(null).cast(StringType))\n        .as(\"virtual_log_dw_bid_custom_model_output_code\"),\n      when(\n        _f_is_buy_side === lit(0),\n        when(\n          isnull(col(\"log_dw_bid\")).and(\n            (_f_is_error_imp === lit(1)).or(\n              is_not_null(col(\"is_dw\").cast(IntegerType))\n                .and(col(\"is_dw\").cast(IntegerType) === lit(1))\n                .and(imp_type.isin(lit(2), lit(4)))\n            )\n          ),\n          lit(0).cast(IntegerType)\n        ).otherwise(\n          when(\n            _f_is_default_or_error_imp === lit(1),\n            when(col(\"log_dw_bid\").isNotNull,\n              col(\"log_dw_bid\").getField(\"revenue_auction_event_type\")\n            ).when(_f_is_default_or_error_imp === lit(1),\n              lit(null).cast(IntegerType)\n            )\n              .when(_f_is_error_imp === lit(1), lit(null).cast(IntegerType))\n              .otherwise(lit(null).cast(IntegerType))\n          ).otherwise(\n            when(imp_type.isin(lit(5), lit(9), lit(2)),\n              col(\"log_dw_bid\").getField(\"revenue_auction_event_type\")\n            ).otherwise(seller_trx_event_id.cast(IntegerType))\n          )\n        )\n      ).otherwise(lit(null).cast(IntegerType))\n        .as(\"virtual_log_dw_bid_revenue_auction_event_type\")\n    )\n  ","language":"scala","description":""}